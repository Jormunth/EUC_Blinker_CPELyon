
VL53L8CX_SimpleRanging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001590c  08008270  08008270  00009270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db7c  0801db7c  0001f0a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801db7c  0801db7c  0001eb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801db84  0801db84  0001f0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801db84  0801db84  0001eb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801db88  0801db88  0001eb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0801db8c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  200000a4  0801dc30  0001f0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001b30  0801dc30  0001fb30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0a4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00012627  00000000  00000000  0001f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000c1  00000000  00000000  000316fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f4e7  00000000  00000000  000317bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a8c  00000000  00000000  00040ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de0  00000000  00000000  00043730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008db42  00000000  00000000  00044510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000aa1  00000000  00000000  000d2052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000183a1  00000000  00000000  000d2af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eae94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004000  00000000  00000000  000eaed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008258 	.word	0x08008258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08008258 	.word	0x08008258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000574:	f004 f87e 	bl	8004674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800059e:	f007 f8e9 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005a2:	f000 fb99 	bl	8000cd8 <main>
  bx  lr    
 80005a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80005b4:	0801db8c 	.word	0x0801db8c
  ldr r2, =_sbss
 80005b8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80005bc:	20001b30 	.word	0x20001b30

080005c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>

080005c2 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_VL53L8CX_SimpleRanging_Init();
 80005c6:	f000 f809 	bl	80005dc <MX_VL53L8CX_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}

080005ce <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_VL53L8CX_SimpleRanging_Process();
 80005d2:	f000 f823 	bl	800061c <MX_VL53L8CX_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_VL53L8CX_SimpleRanging_Init>:

static void MX_VL53L8CX_SimpleRanging_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fd05 	bl	8000ff0 <BSP_COM_Init>

  printf("Sensor initialization...\n");
 80005e6:	480a      	ldr	r0, [pc, #40]	@ (8000610 <MX_VL53L8CX_SimpleRanging_Init+0x34>)
 80005e8:	f006 ff90 	bl	800750c <puts>

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L8CX);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f9a9 	bl	8000944 <CUSTOM_RANGING_SENSOR_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <MX_VL53L8CX_SimpleRanging_Init+0x38>)
 80005f6:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_VL53L8CX_SimpleRanging_Init+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <MX_VL53L8CX_SimpleRanging_Init+0x2e>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_VL53L8CX_SimpleRanging_Init+0x3c>)
 8000602:	f006 ff83 	bl	800750c <puts>
    while (1);
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <MX_VL53L8CX_SimpleRanging_Init+0x2a>
  }
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	08008270 	.word	0x08008270
 8000614:	200000e4 	.word	0x200000e4
 8000618:	0800828c 	.word	0x0800828c

0800061c <MX_VL53L8CX_SimpleRanging_Process>:
    HAL_Delay(POLLING_PERIOD);
  }
}
#else
static void MX_VL53L8CX_SimpleRanging_Process(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  uint32_t Id;
  static RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L8CX, &Id);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f9b2 	bl	8000990 <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L8CX, &Cap);
 800062c:	491d      	ldr	r1, [pc, #116]	@ (80006a4 <MX_VL53L8CX_SimpleRanging_Process+0x88>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f9d8 	bl	80009e4 <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8000636:	2203      	movs	r2, #3
 8000638:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET;
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 800063c:	221e      	movs	r2, #30
 800063e:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8000642:	220a      	movs	r2, #10
 8000644:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8000646:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 800064c:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8000652:	4915      	ldr	r1, [pc, #84]	@ (80006a8 <MX_VL53L8CX_SimpleRanging_Process+0x8c>)
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f9ef 	bl	8000a38 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 800065a:	2101      	movs	r1, #1
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fa3f 	bl	8000ae0 <CUSTOM_RANGING_SENSOR_Start>
 8000662:	4603      	mov	r3, r0
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 8000666:	6013      	str	r3, [r2, #0]

  while (1)
  {
    /* polling mode */
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 8000668:	4911      	ldr	r1, [pc, #68]	@ (80006b0 <MX_VL53L8CX_SimpleRanging_Process+0x94>)
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fa0e 	bl	8000a8c <CUSTOM_RANGING_SENSOR_GetDistance>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 8000674:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <MX_VL53L8CX_SimpleRanging_Process+0x90>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d102      	bne.n	8000684 <MX_VL53L8CX_SimpleRanging_Process+0x68>
    {
      print_result(&Result);
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_VL53L8CX_SimpleRanging_Process+0x94>)
 8000680:	f000 f818 	bl	80006b4 <print_result>
    }

    if (com_has_data())
 8000684:	f000 f936 	bl	80008f4 <com_has_data>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d005      	beq.n	800069a <MX_VL53L8CX_SimpleRanging_Process+0x7e>
    {
      handle_cmd(get_key());
 800068e:	f000 f91d 	bl	80008cc <get_key>
 8000692:	4603      	mov	r3, r0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f8f9 	bl	800088c <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 800069a:	2001      	movs	r0, #1
 800069c:	f004 f86e 	bl	800477c <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 80006a0:	e7e2      	b.n	8000668 <MX_VL53L8CX_SimpleRanging_Process+0x4c>
 80006a2:	bf00      	nop
 80006a4:	200000c0 	.word	0x200000c0
 80006a8:	200000d0 	.word	0x200000d0
 80006ac:	200000e4 	.word	0x200000e4
 80006b0:	200000ec 	.word	0x200000ec

080006b4 <print_result>:
  }
}
#endif /* USE_BARE_DRIVER */

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  int8_t j;
  int8_t k;
  int8_t l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <print_result+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d003      	beq.n	80006cc <print_result+0x18>
                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80006c4:	4b3c      	ldr	r3, [pc, #240]	@ (80007b8 <print_result+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d101      	bne.n	80006d0 <print_result+0x1c>
 80006cc:	2308      	movs	r3, #8
 80006ce:	e000      	b.n	80006d2 <print_result+0x1e>
 80006d0:	2304      	movs	r3, #4
 80006d2:	733b      	strb	r3, [r7, #12]

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e061      	b.n	800079e <print_result+0xea>
  {
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80006da:	2300      	movs	r3, #0
 80006dc:	737b      	strb	r3, [r7, #13]
 80006de:	e055      	b.n	800078c <print_result+0xd8>
    {
      for (k = 0; k < zones_per_line; k++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	73bb      	strb	r3, [r7, #14]
 80006e4:	e047      	b.n	8000776 <print_result+0xc2>
      {
        if ((j + k) < Result->NumberOfZones && Result->ZoneResult[j + k].NumberOfTargets > 0)
 80006e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006ee:	4413      	add	r3, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <print_result+0xb0>
 80006fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000702:	441a      	add	r2, r3
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	440b      	add	r3, r1
 8000710:	3304      	adds	r3, #4
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d025      	beq.n	8000764 <print_result+0xb0>
        {
          printf("%ld:%ld,",(long)Result->ZoneResult[j + k].Distance[l], (long)Result->ZoneResult[j + k].Status[l]);
 8000718:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800071c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000720:	441a      	add	r2, r3
 8000722:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	4403      	add	r3, r0
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	461c      	mov	r4, r3
 8000738:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800073c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000740:	441a      	add	r2, r3
 8000742:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	4403      	add	r3, r0
 8000750:	3302      	adds	r3, #2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	461a      	mov	r2, r3
 800075a:	4621      	mov	r1, r4
 800075c:	4817      	ldr	r0, [pc, #92]	@ (80007bc <print_result+0x108>)
 800075e:	f006 fe65 	bl	800742c <iprintf>
 8000762:	e002      	b.n	800076a <print_result+0xb6>
        }
        else
        {
          printf("X:X,");
 8000764:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <print_result+0x10c>)
 8000766:	f006 fe61 	bl	800742c <iprintf>
      for (k = 0; k < zones_per_line; k++)
 800076a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	3301      	adds	r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	73bb      	strb	r3, [r7, #14]
 8000776:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800077a:	7b3b      	ldrb	r3, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	dbb2      	blt.n	80006e6 <print_result+0x32>
    for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8000780:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	3301      	adds	r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	737b      	strb	r3, [r7, #13]
 800078c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0a5      	beq.n	80006e0 <print_result+0x2c>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8000794:	7bfa      	ldrb	r2, [r7, #15]
 8000796:	7b3b      	ldrb	r3, [r7, #12]
 8000798:	4413      	add	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d397      	bcc.n	80006da <print_result+0x26>
        }
      }
    }
  }
  printf("\n");
 80007aa:	200a      	movs	r0, #10
 80007ac:	f006 fe50 	bl	8007450 <putchar>
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	200000d0 	.word	0x200000d0
 80007bc:	080082b0 	.word	0x080082b0
 80007c0:	080082bc 	.word	0x080082bc

080007c4 <toggle_resolution>:


static void toggle_resolution(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 f9b5 	bl	8000b38 <CUSTOM_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <toggle_resolution+0x64>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d81b      	bhi.n	8000810 <toggle_resolution+0x4c>
 80007d8:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <toggle_resolution+0x1c>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	080007f9 	.word	0x080007f9
 80007e4:	080007f1 	.word	0x080007f1
 80007e8:	08000809 	.word	0x08000809
 80007ec:	08000801 	.word	0x08000801
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <toggle_resolution+0x64>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	601a      	str	r2, [r3, #0]
      break;
 80007f6:	e00c      	b.n	8000812 <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <toggle_resolution+0x64>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
      break;
 80007fe:	e008      	b.n	8000812 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <toggle_resolution+0x64>)
 8000802:	2202      	movs	r2, #2
 8000804:	601a      	str	r2, [r3, #0]
      break;
 8000806:	e004      	b.n	8000812 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <toggle_resolution+0x64>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
      break;
 800080e:	e000      	b.n	8000812 <toggle_resolution+0x4e>

    default:
      break;
 8000810:	bf00      	nop
  }

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8000812:	4905      	ldr	r1, [pc, #20]	@ (8000828 <toggle_resolution+0x64>)
 8000814:	2000      	movs	r0, #0
 8000816:	f000 f90f 	bl	8000a38 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 800081a:	2101      	movs	r1, #1
 800081c:	2000      	movs	r0, #0
 800081e:	f000 f95f 	bl	8000ae0 <CUSTOM_RANGING_SENSOR_Start>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000d0 	.word	0x200000d0

0800082c <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f981 	bl	8000b38 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <toggle_signal_and_ambient+0x48>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	461a      	mov	r2, r3
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <toggle_signal_and_ambient+0x48>)
 8000848:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <toggle_signal_and_ambient+0x48>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <toggle_signal_and_ambient+0x48>)
 800085c:	611a      	str	r2, [r3, #16]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 800085e:	4905      	ldr	r1, [pc, #20]	@ (8000874 <toggle_signal_and_ambient+0x48>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 f8e9 	bl	8000a38 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 8000866:	2101      	movs	r1, #1
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f939 	bl	8000ae0 <CUSTOM_RANGING_SENSOR_Start>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000d0 	.word	0x200000d0

08000878 <clear_screen>:

static void clear_screen(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* clear Screen : 27 is ESC command */
  printf("%c[2J", 27);
 800087c:	211b      	movs	r1, #27
 800087e:	4802      	ldr	r0, [pc, #8]	@ (8000888 <clear_screen+0x10>)
 8000880:	f006 fdd4 	bl	800742c <iprintf>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	080082c4 	.word	0x080082c4

0800088c <handle_cmd>:
  printf(" 'c' : clear screen\n");
  printf("\n");
}

static void handle_cmd(uint8_t cmd)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b73      	cmp	r3, #115	@ 0x73
 800089a:	d00a      	beq.n	80008b2 <handle_cmd+0x26>
 800089c:	2b73      	cmp	r3, #115	@ 0x73
 800089e:	dc10      	bgt.n	80008c2 <handle_cmd+0x36>
 80008a0:	2b63      	cmp	r3, #99	@ 0x63
 80008a2:	d00b      	beq.n	80008bc <handle_cmd+0x30>
 80008a4:	2b72      	cmp	r3, #114	@ 0x72
 80008a6:	d10c      	bne.n	80008c2 <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 80008a8:	f7ff ff8c 	bl	80007c4 <toggle_resolution>
      clear_screen();
 80008ac:	f7ff ffe4 	bl	8000878 <clear_screen>
      break;
 80008b0:	e008      	b.n	80008c4 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 80008b2:	f7ff ffbb 	bl	800082c <toggle_signal_and_ambient>
      clear_screen();
 80008b6:	f7ff ffdf 	bl	8000878 <clear_screen>
      break;
 80008ba:	e003      	b.n	80008c4 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 80008bc:	f7ff ffdc 	bl	8000878 <clear_screen>
      break;
 80008c0:	e000      	b.n	80008c4 <handle_cmd+0x38>

    default:
      break;
 80008c2:	bf00      	nop
  }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <get_key>:

static uint8_t get_key(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 80008d6:	1df9      	adds	r1, r7, #7
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008dc:	2201      	movs	r2, #1
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <get_key+0x24>)
 80008e0:	f006 f91b 	bl	8006b1a <HAL_UART_Receive>

  return cmd;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200010e8 	.word	0x200010e8

080008f4 <com_has_data>:

static uint32_t com_has_data(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <com_has_data+0x24>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	2b20      	cmp	r3, #32
 8000904:	bf0c      	ite	eq
 8000906:	2301      	moveq	r3, #1
 8000908:	2300      	movne	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	200010e8 	.word	0x200010e8

0800091c <HAL_GPIO_EXTI_Callback>:
    ToF_EventDetected = 1;
  }
}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	2b10      	cmp	r3, #16
 800092a:	d102      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <HAL_GPIO_EXTI_Callback+0x24>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000e8 	.word	0x200000e8

08000944 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000952:	f06f 0301 	mvn.w	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e015      	b.n	8000986 <CUSTOM_RANGING_SENSOR_Init+0x42>
  }
  else
  {
    reset_device();
 800095a:	f000 f995 	bl	8000c88 <reset_device>

    switch (Instance)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10c      	bne.n	800097e <CUSTOM_RANGING_SENSOR_Init+0x3a>
    {
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
      case CUSTOM_VL53L8CX:
        if (VL53L8CX_Probe(Instance) != BSP_ERROR_NONE)
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f90f 	bl	8000b88 <VL53L8CX_Probe>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <CUSTOM_RANGING_SENSOR_Init+0x34>
        {
          ret = BSP_ERROR_NO_INIT;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000974:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          ret = BSP_ERROR_NONE;
        }
        break;
 8000976:	e006      	b.n	8000986 <CUSTOM_RANGING_SENSOR_Init+0x42>
          ret = BSP_ERROR_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
        break;
 800097c:	e003      	b.n	8000986 <CUSTOM_RANGING_SENSOR_Init+0x42>
#endif /* Use custom ranging */
      default:
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800097e:	f06f 0306 	mvn.w	r3, #6
 8000982:	60fb      	str	r3, [r7, #12]
        break;
 8000984:	bf00      	nop
    }
  }

  return ret;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009a0:	f06f 0301 	mvn.w	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e014      	b.n	80009d2 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 80009a8:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	490b      	ldr	r1, [pc, #44]	@ (80009e0 <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	4610      	mov	r0, r2
 80009be:	4798      	blx	r3
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da03      	bge.n	80009ce <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80009c6:	f06f 0304 	mvn.w	r3, #4
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e001      	b.n	80009d2 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200005f4 	.word	0x200005f4
 80009e0:	200005f0 	.word	0x200005f0

080009e4 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009f4:	f06f 0301 	mvn.w	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e014      	b.n	8000a26 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a0e:	6839      	ldr	r1, [r7, #0]
 8000a10:	4610      	mov	r0, r2
 8000a12:	4798      	blx	r3
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da03      	bge.n	8000a22 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000a1a:	f06f 0304 	mvn.w	r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e001      	b.n	8000a26 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200005f4 	.word	0x200005f4
 8000a34:	200005f0 	.word	0x200005f0

08000a38 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a48:	f06f 0301 	mvn.w	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e014      	b.n	8000a7a <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8000a50:	4a0c      	ldr	r2, [pc, #48]	@ (8000a84 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	490b      	ldr	r1, [pc, #44]	@ (8000a88 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a62:	6839      	ldr	r1, [r7, #0]
 8000a64:	4610      	mov	r0, r2
 8000a66:	4798      	blx	r3
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da03      	bge.n	8000a76 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000a6e:	f06f 0304 	mvn.w	r3, #4
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e001      	b.n	8000a7a <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200005f4 	.word	0x200005f4
 8000a88:	200005f0 	.word	0x200005f0

08000a8c <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a9c:	f06f 0301 	mvn.w	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e014      	b.n	8000ace <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	490b      	ldr	r1, [pc, #44]	@ (8000adc <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4798      	blx	r3
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da03      	bge.n	8000aca <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000ac2:	f06f 0304 	mvn.w	r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e001      	b.n	8000ace <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200005f4 	.word	0x200005f4
 8000adc:	200005f0 	.word	0x200005f0

08000ae0 <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000af2:	f06f 0301 	mvn.w	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e014      	b.n	8000b24 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 8000afa:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <CUSTOM_RANGING_SENSOR_Start+0x50>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	490b      	ldr	r1, [pc, #44]	@ (8000b34 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b0c:	78f9      	ldrb	r1, [r7, #3]
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4798      	blx	r3
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da03      	bge.n	8000b20 <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000b18:	f06f 0304 	mvn.w	r3, #4
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e001      	b.n	8000b24 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000b24:	68fb      	ldr	r3, [r7, #12]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200005f4 	.word	0x200005f4
 8000b34:	200005f0 	.word	0x200005f0

08000b38 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b46:	f06f 0301 	mvn.w	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e013      	b.n	8000b76 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b58:	490a      	ldr	r1, [pc, #40]	@ (8000b84 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da03      	bge.n	8000b72 <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000b6a:	f06f 0304 	mvn.w	r3, #4
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e001      	b.n	8000b76 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200005f4 	.word	0x200005f4
 8000b84:	200005f0 	.word	0x200005f0

08000b88 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8000b90:	2352      	movs	r3, #82	@ 0x52
 8000b92:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L8CX_I2C_INIT;
 8000b94:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <VL53L8CX_Probe+0xd8>)
 8000b96:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L8CX_I2C_DEINIT;
 8000b98:	4b32      	ldr	r3, [pc, #200]	@ (8000c64 <VL53L8CX_Probe+0xdc>)
 8000b9a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L8CX_I2C_WRITEREG;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <VL53L8CX_Probe+0xe0>)
 8000b9e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L8CX_I2C_READREG;
 8000ba0:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <VL53L8CX_Probe+0xe4>)
 8000ba2:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <VL53L8CX_Probe+0xe8>)
 8000ba6:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&VL53L8CXObj, &IOCtx) != VL53L8CX_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <VL53L8CX_Probe+0xec>)
 8000bb0:	f000 fd9b 	bl	80016ea <VL53L8CX_RegisterBusIO>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <VL53L8CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000bba:	f06f 0304 	mvn.w	r3, #4
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc0:	e049      	b.n	8000c56 <VL53L8CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <VL53L8CX_Probe+0xf0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	492d      	ldr	r1, [pc, #180]	@ (8000c7c <VL53L8CX_Probe+0xf4>)
 8000bc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L8CXObj;
 8000bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8000c80 <VL53L8CX_Probe+0xf8>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4928      	ldr	r1, [pc, #160]	@ (8000c74 <VL53L8CX_Probe+0xec>)
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L8CX_ReadID(&VL53L8CXObj, &id) != VL53L8CX_OK)
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4825      	ldr	r0, [pc, #148]	@ (8000c74 <VL53L8CX_Probe+0xec>)
 8000bde:	f000 fe34 	bl	800184a <VL53L8CX_ReadID>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <VL53L8CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000be8:	f06f 0304 	mvn.w	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bee:	e032      	b.n	8000c56 <VL53L8CX_Probe+0xce>
    }
    else if (id != VL53L8CX_ID)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f24f 020c 	movw	r2, #61452	@ 0xf00c
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d003      	beq.n	8000c02 <VL53L8CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000bfa:	f06f 0306 	mvn.w	r3, #6
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c00:	e029      	b.n	8000c56 <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L8CX_OK)
 8000c02:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <VL53L8CX_Probe+0xf0>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	491c      	ldr	r1, [pc, #112]	@ (8000c80 <VL53L8CX_Probe+0xf8>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c14:	4610      	mov	r0, r2
 8000c16:	4798      	blx	r3
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c1e:	f06f 0304 	mvn.w	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c24:	e017      	b.n	8000c56 <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <VL53L8CX_Probe+0xf0>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4913      	ldr	r1, [pc, #76]	@ (8000c80 <VL53L8CX_Probe+0xf8>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
                                                           &RANGING_SENSOR_Cap[Instance]) != VL53L8CX_OK)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	4911      	ldr	r1, [pc, #68]	@ (8000c84 <VL53L8CX_Probe+0xfc>)
 8000c3e:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8000c40:	4611      	mov	r1, r2
 8000c42:	4798      	blx	r3
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <VL53L8CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000c4a:	f06f 0304 	mvn.w	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c50:	e001      	b.n	8000c56 <VL53L8CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08001191 	.word	0x08001191
 8000c64:	080011f5 	.word	0x080011f5
 8000c68:	08001245 	.word	0x08001245
 8000c6c:	080012a9 	.word	0x080012a9
 8000c70:	0800130d 	.word	0x0800130d
 8000c74:	20000608 	.word	0x20000608
 8000c78:	200005f4 	.word	0x200005f4
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	200005f0 	.word	0x200005f0
 8000c84:	200005f8 	.word	0x200005f8

08000c88 <reset_device>:
#endif /* Use custom ranging */

static void reset_device(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <reset_device+0x48>)
 8000c92:	f004 f911 	bl	8004eb8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f003 fd70 	bl	800477c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	@ 0x80
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <reset_device+0x48>)
 8000ca2:	f004 f909 	bl	8004eb8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f003 fd68 	bl	800477c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <reset_device+0x4c>)
 8000cb2:	f004 f901 	bl	8004eb8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f003 fd60 	bl	800477c <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <reset_device+0x4c>)
 8000cc2:	f004 f8f9 	bl	8004eb8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f003 fd58 	bl	800477c <HAL_Delay>
#endif /* Use custom ranging */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f003 fcdc 	bl	8004698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f808 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f000 f872 	bl	8000dcc <MX_GPIO_Init>
  MX_TOF_Init();
 8000ce8:	f7ff fc6b 	bl	80005c2 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000cec:	f7ff fc6f 	bl	80005ce <MX_TOF_Process>
 8000cf0:	e7fc      	b.n	8000cec <main+0x14>
	...

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	@ 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	2230      	movs	r2, #48	@ 0x30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fce2 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <SystemClock_Config+0xd0>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <SystemClock_Config+0xd0>)
 8000d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <SystemClock_Config+0xd0>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <SystemClock_Config+0xd4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d40:	4a21      	ldr	r2, [pc, #132]	@ (8000dc8 <SystemClock_Config+0xd4>)
 8000d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <SystemClock_Config+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d72:	2304      	movs	r3, #4
 8000d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d76:	2307      	movs	r3, #7
 8000d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 f94e 	bl	8006020 <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d8a:	f000 f8c5 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	230f      	movs	r3, #15
 8000d90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2102      	movs	r1, #2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fbb0 	bl	8006510 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000db6:	f000 f8af 	bl	8000f18 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3750      	adds	r7, #80	@ 0x50
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b48      	ldr	r3, [pc, #288]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a47      	ldr	r2, [pc, #284]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b45      	ldr	r3, [pc, #276]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a40      	ldr	r2, [pc, #256]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a39      	ldr	r2, [pc, #228]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b37      	ldr	r3, [pc, #220]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a32      	ldr	r2, [pc, #200]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b30      	ldr	r3, [pc, #192]	@ (8000f08 <MX_GPIO_Init+0x13c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	482d      	ldr	r0, [pc, #180]	@ (8000f0c <MX_GPIO_Init+0x140>)
 8000e58:	f004 f82e 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	@ 0x80
 8000e60:	482a      	ldr	r0, [pc, #168]	@ (8000f0c <MX_GPIO_Init+0x140>)
 8000e62:	f004 f829 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4829      	ldr	r0, [pc, #164]	@ (8000f10 <MX_GPIO_Init+0x144>)
 8000e6c:	f004 f824 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4823      	ldr	r0, [pc, #140]	@ (8000f14 <MX_GPIO_Init+0x148>)
 8000e88:	f003 fdae 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481a      	ldr	r0, [pc, #104]	@ (8000f0c <MX_GPIO_Init+0x140>)
 8000ea2:	f003 fda1 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000ea6:	23a0      	movs	r3, #160	@ 0xa0
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4813      	ldr	r0, [pc, #76]	@ (8000f0c <MX_GPIO_Init+0x140>)
 8000ebe:	f003 fd93 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_GPIO_Init+0x144>)
 8000eda:	f003 fd85 	bl	80049e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f003 fd49 	bl	800497a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f003 fd62 	bl	80049b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2028      	movs	r0, #40	@ 0x28
 8000ef4:	f003 fd41 	bl	800497a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef8:	2028      	movs	r0, #40	@ 0x28
 8000efa:	f003 fd5a 	bl	80049b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f62:	2007      	movs	r0, #7
 8000f64:	f003 fcfe 	bl	8004964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f003 fbb7 	bl	800473c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f003 ff88 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fe4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe8:	f003 ff80 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d903      	bls.n	800100c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001004:	f06f 0301 	mvn.w	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e025      	b.n	8001058 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4914      	ldr	r1, [pc, #80]	@ (8001064 <BSP_COM_Init+0x74>)
 8001012:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001016:	4814      	ldr	r0, [pc, #80]	@ (8001068 <BSP_COM_Init+0x78>)
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4403      	add	r3, r0
 8001022:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001024:	79fa      	ldrb	r2, [r7, #7]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <BSP_COM_Init+0x78>)
 8001030:	4413      	add	r3, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f864 	bl	8001100 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <BSP_COM_Init+0x78>)
 8001044:	4413      	add	r3, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f810 	bl	800106c <MX_USART2_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001052:	f06f 0303 	mvn.w	r3, #3
 8001056:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000000 	.word	0x20000000
 8001068:	200010e8 	.word	0x200010e8

0800106c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 800107c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 460800;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001084:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f005 fc50 	bl	8006950 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004400 	.word	0x40004400

080010c8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <__io_putchar+0x30>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <__io_putchar+0x34>)
 80010e0:	1898      	adds	r0, r3, r2
 80010e2:	1d39      	adds	r1, r7, #4
 80010e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e8:	2201      	movs	r2, #1
 80010ea:	f005 fc8b 	bl	8006a04 <HAL_UART_Transmit>
  return ch;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20001130 	.word	0x20001130
 80010fc:	200010e8 	.word	0x200010e8

08001100 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <USART2_MspInit+0x88>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <USART2_MspInit+0x88>)
 8001112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <USART2_MspInit+0x88>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <USART2_MspInit+0x88>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <USART2_MspInit+0x88>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6313      	str	r3, [r2, #48]	@ 0x30
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <USART2_MspInit+0x88>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001140:	2304      	movs	r3, #4
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001150:	2307      	movs	r3, #7
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	@ (800118c <USART2_MspInit+0x8c>)
 800115c:	f003 fc44 	bl	80049e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001160:	2308      	movs	r3, #8
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001170:	2307      	movs	r3, #7
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <USART2_MspInit+0x8c>)
 800117c:	f003 fc34 	bl	80049e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <BSP_I2C1_Init+0x58>)
 800119c:	4a13      	ldr	r2, [pc, #76]	@ (80011ec <BSP_I2C1_Init+0x5c>)
 800119e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <BSP_I2C1_Init+0x60>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	4912      	ldr	r1, [pc, #72]	@ (80011f0 <BSP_I2C1_Init+0x60>)
 80011a8:	600a      	str	r2, [r1, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d117      	bne.n	80011de <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80011ae:	480e      	ldr	r0, [pc, #56]	@ (80011e8 <BSP_I2C1_Init+0x58>)
 80011b0:	f004 fb68 	bl	8005884 <HAL_I2C_GetState>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d111      	bne.n	80011de <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80011ba:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <BSP_I2C1_Init+0x58>)
 80011bc:	f000 f8e2 	bl	8001384 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <BSP_I2C1_Init+0x58>)
 80011c8:	f000 f8a8 	bl	800131c <MX_I2C1_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80011d2:	f06f 0307 	mvn.w	r3, #7
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80011de:	687b      	ldr	r3, [r7, #4]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20001134 	.word	0x20001134
 80011ec:	40005400 	.word	0x40005400
 80011f0:	20001188 	.word	0x20001188

080011f4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <BSP_I2C1_DeInit+0x48>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d014      	beq.n	8001230 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <BSP_I2C1_DeInit+0x48>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <BSP_I2C1_DeInit+0x48>)
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <BSP_I2C1_DeInit+0x48>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10b      	bne.n	8001230 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <BSP_I2C1_DeInit+0x4c>)
 800121a:	f000 f8fd 	bl	8001418 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <BSP_I2C1_DeInit+0x4c>)
 8001220:	f003 ffc0 	bl	80051a4 <HAL_I2C_DeInit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800122a:	f06f 0307 	mvn.w	r3, #7
 800122e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20001188 	.word	0x20001188
 8001240:	20001134 	.word	0x20001134

08001244 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af04      	add	r7, sp, #16
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	81fb      	strh	r3, [r7, #14]
 8001252:	460b      	mov	r3, r1
 8001254:	81bb      	strh	r3, [r7, #12]
 8001256:	4613      	mov	r3, r2
 8001258:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800125e:	89ba      	ldrh	r2, [r7, #12]
 8001260:	89f9      	ldrh	r1, [r7, #14]
 8001262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2310      	movs	r3, #16
 8001272:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <BSP_I2C1_WriteReg16+0x60>)
 8001274:	f003 ffda 	bl	800522c <HAL_I2C_Mem_Write>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800127e:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <BSP_I2C1_WriteReg16+0x60>)
 8001280:	f004 fb0e 	bl	80058a0 <HAL_I2C_GetError>
 8001284:	4603      	mov	r3, r0
 8001286:	2b04      	cmp	r3, #4
 8001288:	d103      	bne.n	8001292 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800128a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e002      	b.n	8001298 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001292:	f06f 0303 	mvn.w	r3, #3
 8001296:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001298:	697b      	ldr	r3, [r7, #20]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20001134 	.word	0x20001134

080012a8 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af04      	add	r7, sp, #16
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	81fb      	strh	r3, [r7, #14]
 80012b6:	460b      	mov	r3, r1
 80012b8:	81bb      	strh	r3, [r7, #12]
 80012ba:	4613      	mov	r3, r2
 80012bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80012c2:	89ba      	ldrh	r2, [r7, #12]
 80012c4:	89f9      	ldrh	r1, [r7, #14]
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2310      	movs	r3, #16
 80012d6:	480c      	ldr	r0, [pc, #48]	@ (8001308 <BSP_I2C1_ReadReg16+0x60>)
 80012d8:	f004 f8a2 	bl	8005420 <HAL_I2C_Mem_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <BSP_I2C1_ReadReg16+0x60>)
 80012e4:	f004 fadc 	bl	80058a0 <HAL_I2C_GetError>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d003      	beq.n	80012f6 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80012ee:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e002      	b.n	80012fc <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80012f6:	f06f 0303 	mvn.w	r3, #3
 80012fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80012fc:	697b      	ldr	r3, [r7, #20]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20001134 	.word	0x20001134

0800130c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001310:	f003 fa28 	bl	8004764 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <MX_I2C1_Init+0x60>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <MX_I2C1_Init+0x64>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f003 fddb 	bl	8004f1c <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	00061a80 	.word	0x00061a80

08001384 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <I2C1_MspInit+0x8c>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <I2C1_MspInit+0x8c>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <I2C1_MspInit+0x8c>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80013a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80013ba:	2304      	movs	r3, #4
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4813      	ldr	r0, [pc, #76]	@ (8001414 <I2C1_MspInit+0x90>)
 80013c6:	f003 fb0f 	bl	80049e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80013ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80013dc:	2304      	movs	r3, #4
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <I2C1_MspInit+0x90>)
 80013e8:	f003 fafe 	bl	80049e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <I2C1_MspInit+0x8c>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <I2C1_MspInit+0x8c>)
 80013f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <I2C1_MspInit+0x8c>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020400 	.word	0x40020400

08001418 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <I2C1_MspDeInit+0x30>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <I2C1_MspDeInit+0x30>)
 8001426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800142c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001430:	4806      	ldr	r0, [pc, #24]	@ (800144c <I2C1_MspDeInit+0x34>)
 8001432:	f003 fc5d 	bl	8004cf0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143a:	4804      	ldr	r0, [pc, #16]	@ (800144c <I2C1_MspDeInit+0x34>)
 800143c:	f003 fc58 	bl	8004cf0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400

08001450 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe0f 	bl	80010c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
  }
  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ea:	605a      	str	r2, [r3, #4]
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f006 f904 	bl	8007768 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20018000 	.word	0x20018000
 800158c:	00000800 	.word	0x00000800
 8001590:	2000118c 	.word	0x2000118c
 8001594:	20001b30 	.word	0x20001b30

08001598 <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	460b      	mov	r3, r1
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689c      	ldr	r4, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8818      	ldrh	r0, [r3, #0]
 80015ae:	8979      	ldrh	r1, [r7, #10]
 80015b0:	2301      	movs	r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	47a0      	blx	r4
 80015b6:	4603      	mov	r3, r0
 80015b8:	b2db      	uxtb	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}

080015c2 <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685c      	ldr	r4, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8818      	ldrh	r0, [r3, #0]
 80015da:	1c7a      	adds	r2, r7, #1
 80015dc:	8879      	ldrh	r1, [r7, #2]
 80015de:	2301      	movs	r3, #1
 80015e0:	47a0      	blx	r4
 80015e2:	4603      	mov	r3, r0
 80015e4:	b2db      	uxtb	r3, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}

080015ee <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	460b      	mov	r3, r1
 80015fc:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685c      	ldr	r4, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8818      	ldrh	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	8979      	ldrh	r1, [r7, #10]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	47a0      	blx	r4
 8001610:	4603      	mov	r3, r0
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	460b      	mov	r3, r1
 800162a:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689c      	ldr	r4, [r3, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8818      	ldrh	r0, [r3, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	8979      	ldrh	r1, [r7, #10]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	47a0      	blx	r4
 800163e:	4603      	mov	r3, r0
 8001640:	b2db      	uxtb	r3, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <VL53L8CX_SwapBuffer>:

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e021      	b.n	80016a0 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	440b      	add	r3, r1
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3302      	adds	r3, #2
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	440b      	add	r3, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	3203      	adds	r2, #3
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	440a      	add	r2, r1
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	4313      	orrs	r3, r2
		tmp = (
 800168e:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3d9      	bcc.n	800165c <VL53L8CX_SwapBuffer+0x12>
	}
}	
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4798      	blx	r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80016ca:	bf00      	nop
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4798      	blx	r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f5      	bhi.n	80016cc <VL53L8CX_WaitMs+0x16>

  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <VL53L8CX_RegisterBusIO+0x16>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001700:	f06f 0301 	mvn.w	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e033      	b.n	8001770 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	891a      	ldrh	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	891a      	ldrh	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4798      	blx	r3
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	e002      	b.n	8001770 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001788:	f06f 0301 	mvn.w	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e02e      	b.n	80017ee <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e025      	b.n	80017ee <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3318      	adds	r3, #24
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f878 	bl	800289c <vl53l8cx_init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e019      	b.n	80017ee <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    pObj->IsBlocking = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
    pObj->IsContinuous = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
    pObj->IsAmbientEnabled = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd
    pObj->IsInitialized = 1U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
    ret = VL53L8CX_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001806:	f06f 0301 	mvn.w	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e018      	b.n	8001840 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3ad8 	ldrb.w	r3, [r3, #2776]	@ 0xad8
 8001814:	2b01      	cmp	r3, #1
 8001816:	d110      	bne.n	800183a <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4798      	blx	r3
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e009      	b.n	8001840 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2ad8 	strb.w	r2, [r3, #2776]	@ 0xad8
 8001838:	e002      	b.n	8001840 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001840:	68fb      	ldr	r3, [r7, #12]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <VL53L8CX_ReadID+0x22>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800186c:	f06f 0301 	mvn.w	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e045      	b.n	8001900 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3318      	adds	r3, #24
 8001878:	2200      	movs	r2, #0
 800187a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe9f 	bl	80015c2 <VL53L8CX_WrByte>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	4313      	orrs	r3, r2
 800188c:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 0, &device_id);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3318      	adds	r3, #24
 8001892:	f107 020a 	add.w	r2, r7, #10
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe7d 	bl	8001598 <VL53L8CX_RdByte>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_RdByte(&pObj->Dev.platform, 1, &revision_id);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3318      	adds	r3, #24
 80018ac:	f107 0209 	add.w	r2, r7, #9
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fe70 	bl	8001598 <VL53L8CX_RdByte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	7afb      	ldrb	r3, [r7, #11]
 80018be:	4313      	orrs	r3, r2
 80018c0:	72fb      	strb	r3, [r7, #11]
    status |= VL53L8CX_WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3318      	adds	r3, #24
 80018c6:	2202      	movs	r2, #2
 80018c8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe78 	bl	80015c2 <VL53L8CX_WrByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	4313      	orrs	r3, r2
 80018da:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 80018e2:	7abb      	ldrb	r3, [r7, #10]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	7a7a      	ldrb	r2, [r7, #9]
 80018e8:	441a      	add	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e005      	b.n	8001900 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001900:	68fb      	ldr	r3, [r7, #12]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <VL53L8CX_GetCapabilities+0x16>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001920:	f06f 0301 	mvn.w	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e00d      	b.n	8001944 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2240      	movs	r2, #64	@ 0x40
 800192c:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01b      	beq.n	80019a0 <VL53L8CX_ConfigProfile+0x4c>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d018      	beq.n	80019a0 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 8001980:	7c7b      	ldrb	r3, [r7, #17]
 8001982:	3b01      	subs	r3, #1
 8001984:	2b03      	cmp	r3, #3
 8001986:	d822      	bhi.n	80019ce <VL53L8CX_ConfigProfile+0x7a>
 8001988:	a201      	add	r2, pc, #4	@ (adr r2, 8001990 <VL53L8CX_ConfigProfile+0x3c>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019a7 	.word	0x080019a7
 8001994:	080019b1 	.word	0x080019b1
 8001998:	080019bb 	.word	0x080019bb
 800199c:	080019c5 	.word	0x080019c5
    return VL53L8CX_INVALID_PARAM;
 80019a0:	f06f 0301 	mvn.w	r3, #1
 80019a4:	e070      	b.n	8001a88 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80019a6:	2310      	movs	r3, #16
 80019a8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80019aa:	2301      	movs	r3, #1
 80019ac:	74bb      	strb	r3, [r7, #18]
    break;
 80019ae:	e016      	b.n	80019de <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 80019b0:	2310      	movs	r3, #16
 80019b2:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80019b4:	2303      	movs	r3, #3
 80019b6:	74bb      	strb	r3, [r7, #18]
    break;
 80019b8:	e011      	b.n	80019de <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80019ba:	2340      	movs	r3, #64	@ 0x40
 80019bc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 80019be:	2301      	movs	r3, #1
 80019c0:	74bb      	strb	r3, [r7, #18]
    break;
 80019c2:	e00c      	b.n	80019de <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 80019c8:	2303      	movs	r3, #3
 80019ca:	74bb      	strb	r3, [r7, #18]
    break;
 80019cc:	e007      	b.n	80019de <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80019ce:	2300      	movs	r3, #0
 80019d0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80019d2:	2300      	movs	r3, #0
 80019d4:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 80019d6:	f06f 0301 	mvn.w	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
    break;
 80019dc:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	e04f      	b.n	8001a88 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3318      	adds	r3, #24
 80019ec:	7cfa      	ldrb	r2, [r7, #19]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 f9cc 	bl	8003d8e <vl53l8cx_set_resolution>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e040      	b.n	8001a86 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3318      	adds	r3, #24
 8001a08:	7cba      	ldrb	r2, [r7, #18]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fae8 	bl	8003fe2 <vl53l8cx_set_ranging_mode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e032      	b.n	8001a86 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3318      	adds	r3, #24
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 faa6 	bl	8003f78 <vl53l8cx_set_integration_time_ms>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e025      	b.n	8001a86 <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3318      	adds	r3, #24
 8001a3e:	7afa      	ldrb	r2, [r7, #11]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fa77 	bl	8003f36 <vl53l8cx_set_ranging_frequency_hz>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e017      	b.n	8001a86 <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f883 2adc 	strb.w	r2, [r3, #2780]	@ 0xadc
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 2add 	strb.w	r2, [r3, #2781]	@ 0xadd

    ret = VL53L8CX_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001a86:	697b      	ldr	r3, [r7, #20]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 8001a9a:	f06f 0303 	mvn.w	r3, #3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <VL53L8CX_ConfigIT+0x1a>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001ac6:	f06f 0301 	mvn.w	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e09f      	b.n	8001c0e <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2bff      	cmp	r3, #255	@ 0xff
 8001ad4:	d113      	bne.n	8001afe <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 fc2b 	bl	8004338 <vl53l8cx_set_detection_thresholds_enable>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	7abb      	ldrb	r3, [r7, #10]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8001aec:	7abb      	ldrb	r3, [r7, #10]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <VL53L8CX_ConfigIT+0x4c>
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af6:	e000      	b.n	8001afa <VL53L8CX_ConfigIT+0x4e>
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e087      	b.n	8001c0e <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3318      	adds	r3, #24
 8001b02:	f107 0209 	add.w	r2, r7, #9
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 f91b 	bl	8003d44 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	72fb      	strb	r3, [r7, #11]
 8001b12:	e044      	b.n	8001b9e <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8001b14:	7afa      	ldrb	r2, [r7, #11]
 8001b16:	4940      	ldr	r1, [pc, #256]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	330a      	adds	r3, #10
 8001b24:	7afa      	ldrb	r2, [r7, #11]
 8001b26:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 8001b28:	7afa      	ldrb	r2, [r7, #11]
 8001b2a:	493b      	ldr	r1, [pc, #236]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	3308      	adds	r3, #8
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	7afa      	ldrb	r2, [r7, #11]
 8001b42:	b2d8      	uxtb	r0, r3
 8001b44:	4934      	ldr	r1, [pc, #208]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3309      	adds	r3, #9
 8001b52:	4602      	mov	r2, r0
 8001b54:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 8001b56:	7afa      	ldrb	r2, [r7, #11]
 8001b58:	492f      	ldr	r1, [pc, #188]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	330b      	adds	r3, #11
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	7afa      	ldrb	r2, [r7, #11]
 8001b70:	4618      	mov	r0, r3
 8001b72:	4929      	ldr	r1, [pc, #164]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	7afa      	ldrb	r2, [r7, #11]
 8001b86:	4618      	mov	r0, r3
 8001b88:	4923      	ldr	r1, [pc, #140]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	72fb      	strb	r3, [r7, #11]
 8001b9e:	7a7b      	ldrb	r3, [r7, #9]
 8001ba0:	7afa      	ldrb	r2, [r7, #11]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3b6      	bcc.n	8001b14 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 8001ba6:	7afa      	ldrb	r2, [r7, #11]
 8001ba8:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	330a      	adds	r3, #10
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	7afa      	ldrb	r2, [r7, #11]
 8001bba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	4915      	ldr	r1, [pc, #84]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	330a      	adds	r3, #10
 8001bce:	4602      	mov	r2, r0
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <VL53L8CX_ConfigIT+0x16c>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fbf3 	bl	80043c4 <vl53l8cx_set_detection_thresholds>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3318      	adds	r3, #24
 8001bec:	2101      	movs	r1, #1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fba2 	bl	8004338 <vl53l8cx_set_detection_thresholds_enable>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	7abb      	ldrb	r3, [r7, #10]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 8001bfe:	7abb      	ldrb	r3, [r7, #10]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <VL53L8CX_ConfigIT+0x15e>
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c08:	e000      	b.n	8001c0c <VL53L8CX_ConfigIT+0x160>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20001190 	.word	0x20001190

08001c1c <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L8CX_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <VL53L8CX_GetDistance+0x1a>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <VL53L8CX_GetDistance+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001c36:	f06f 0301 	mvn.w	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e007      	b.n	8001c4e <VL53L8CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <VL53L8CX_GetDistance+0x32>
  {
    ret = VL53L8CX_ERROR;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  if (ret == VL53L8CX_OK)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d110      	bne.n	8001c76 <VL53L8CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3ada 	ldrb.w	r3, [r3, #2778]	@ 0xada
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d106      	bne.n	8001c6c <VL53L8CX_GetDistance+0x50>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 8001c5e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f939 	bl	8001eda <vl53l8cx_poll_for_measurement>
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	e004      	b.n	8001c76 <VL53L8CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f933 	bl	8001eda <vl53l8cx_poll_for_measurement>
 8001c74:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <VL53L8CX_GetDistance+0x6a>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f95e 	bl	8001f40 <vl53l8cx_get_result>
 8001c84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001ca0:	f06f 0301 	mvn.w	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e04c      	b.n	8001d42 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3318      	adds	r3, #24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fb8b 	bl	80033c8 <vl53l8cx_start_ranging>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d141      	bne.n	8001d3c <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d82f      	bhi.n	8001d2c <VL53L8CX_Start+0x9c>
 8001ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <VL53L8CX_Start+0x44>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001cf7 	.word	0x08001cf7
 8001cdc:	08001d09 	.word	0x08001d09
 8001ce0:	08001d1b 	.word	0x08001d1b
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001cf4:	e025      	b.n	8001d42 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 1U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d06:	e01c      	b.n	8001d42 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d18:	e013      	b.n	8001d42 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2adb 	strb.w	r2, [r3, #2779]	@ 0xadb
        pObj->IsBlocking = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2ada 	strb.w	r2, [r3, #2778]	@ 0xada
        break;
 8001d2a:	e00a      	b.n	8001d42 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
        ret = VL53L8CX_INVALID_PARAM;
 8001d34:	f06f 0301 	mvn.w	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
        break;
 8001d3a:	e002      	b.n	8001d42 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001d5a:	f06f 0301 	mvn.w	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e01a      	b.n	8001d98 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3ad9 	ldrb.w	r3, [r3, #2777]	@ 0xad9
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e011      	b.n	8001d98 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3318      	adds	r3, #24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fcbb 	bl	80036f4 <vl53l8cx_stop_ranging>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2ad9 	strb.w	r2, [r3, #2777]	@ 0xad9
    ret = VL53L8CX_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e002      	b.n	8001d98 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001db2:	f06f 0301 	mvn.w	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e015      	b.n	8001de6 <VL53L8CX_SetAddress+0x44>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 f995 	bl	80030f4 <vl53l8cx_set_i2c_address>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <VL53L8CX_SetAddress+0x36>
  {
    ret = VL53L8CX_ERROR;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e006      	b.n	8001de6 <VL53L8CX_SetAddress+0x44>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <VL53L8CX_GetAddress+0x16>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001e06:	f06f 0301 	mvn.w	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e006      	b.n	8001e1c <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	891b      	ldrh	r3, [r3, #8]
 8001e12:	461a      	mov	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001e3a:	f06f 0301 	mvn.w	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e01a      	b.n	8001e78 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <VL53L8CX_SetPowerMode+0x2c>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d003      	beq.n	8001e56 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001e4e:	f06f 0301 	mvn.w	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e010      	b.n	8001e78 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3318      	adds	r3, #24
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f9d3 	bl	800320c <vl53l8cx_set_power_mode>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e001      	b.n	8001e78 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <VL53L8CX_GetPowerMode+0x16>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d103      	bne.n	8001ea0 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001e98:	f06f 0301 	mvn.w	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e017      	b.n	8001ed0 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	f107 020b 	add.w	r2, r7, #11
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 f958 	bl	8003160 <vl53l8cx_get_power_mode>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e005      	b.n	8001ed0 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001eee:	f06f 0301 	mvn.w	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e01f      	b.n	8001f36 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 8001ef6:	f06f 0302 	mvn.w	r3, #2
 8001efa:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4798      	blx	r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3318      	adds	r3, #24
 8001f0a:	f107 020f 	add.w	r2, r7, #15
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fcbf 	bl	8003894 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
        break;
 8001f20:	e009      	b.n	8001f36 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4798      	blx	r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d8e7      	bhi.n	8001f06 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 8001f36:	697b      	ldr	r3, [r7, #20]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <vl53l8cx_get_result+0x16>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8001f56:	f06f 0301 	mvn.w	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e0cf      	b.n	80020fe <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3318      	adds	r3, #24
 8001f62:	f107 0208 	add.w	r2, r7, #8
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 feeb 	bl	8003d44 <vl53l8cx_get_resolution>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	e0c0      	b.n	80020fe <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3318      	adds	r3, #24
 8001f80:	4961      	ldr	r1, [pc, #388]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fcd6 	bl	8003934 <vl53l8cx_get_ranging_data>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e0b3      	b.n	80020fe <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8001f96:	7a3b      	ldrb	r3, [r7, #8]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	72fb      	strb	r3, [r7, #11]
 8001fa2:	e0a5      	b.n	80020f0 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	7afa      	ldrb	r2, [r7, #11]
 8001fa8:	4957      	ldr	r1, [pc, #348]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 8001faa:	440b      	add	r3, r1
 8001fac:	f893 0104 	ldrb.w	r0, [r3, #260]	@ 0x104
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	72bb      	strb	r3, [r7, #10]
 8001fc6:	e087      	b.n	80020d8 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8001fc8:	7afa      	ldrb	r2, [r7, #11]
 8001fca:	7abb      	ldrb	r3, [r7, #10]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a4e      	ldr	r2, [pc, #312]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 8001fd0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fdc:	7afa      	ldrb	r2, [r7, #11]
 8001fde:	7ab8      	ldrb	r0, [r7, #10]
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	4403      	add	r3, r0
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3adc 	ldrb.w	r3, [r3, #2780]	@ 0xadc
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d116      	bne.n	800202a <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	4a42      	ldr	r2, [pc, #264]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	7afa      	ldrb	r2, [r7, #11]
 8002008:	7ab8      	ldrb	r0, [r7, #10]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	4403      	add	r3, r0
 800201c:	3302      	adds	r3, #2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3308      	adds	r3, #8
 8002024:	edc3 7a00 	vstr	s15, [r3]
 8002028:	e00d      	b.n	8002046 <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800202a:	7afa      	ldrb	r2, [r7, #11]
 800202c:	7ab8      	ldrb	r0, [r7, #10]
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	4403      	add	r3, r0
 8002038:	3302      	adds	r3, #2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3308      	adds	r3, #8
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3add 	ldrb.w	r3, [r3, #2781]	@ 0xadd
 800204c:	2b01      	cmp	r3, #1
 800204e:	d119      	bne.n	8002084 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002050:	7afa      	ldrb	r2, [r7, #11]
 8002052:	7abb      	ldrb	r3, [r7, #10]
 8002054:	4413      	add	r3, r2
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 8002058:	3390      	adds	r3, #144	@ 0x90
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8002060:	7afa      	ldrb	r2, [r7, #11]
 8002062:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	4403      	add	r3, r0
 8002076:	3304      	adds	r3, #4
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3304      	adds	r3, #4
 800207e:	edc3 7a00 	vstr	s15, [r3]
 8002082:	e00d      	b.n	80020a0 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8002084:	7afa      	ldrb	r2, [r7, #11]
 8002086:	7ab8      	ldrb	r0, [r7, #10]
 8002088:	6839      	ldr	r1, [r7, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	4403      	add	r3, r0
 8002092:	3304      	adds	r3, #4
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3304      	adds	r3, #4
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 80020a0:	7afa      	ldrb	r2, [r7, #11]
 80020a2:	7abb      	ldrb	r3, [r7, #10]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 80020a8:	4413      	add	r3, r2
 80020aa:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
 80020ae:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 80020b0:	7a7b      	ldrb	r3, [r7, #9]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f82a 	bl	800210c <vl53l8cx_map_target_status>
 80020b8:	4603      	mov	r3, r0
 80020ba:	7afa      	ldrb	r2, [r7, #11]
 80020bc:	7ab8      	ldrb	r0, [r7, #10]
 80020be:	461c      	mov	r4, r3
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	4403      	add	r3, r0
 80020ca:	3302      	adds	r3, #2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 80020d2:	7abb      	ldrb	r3, [r7, #10]
 80020d4:	3301      	adds	r3, #1
 80020d6:	72bb      	strb	r3, [r7, #10]
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <vl53l8cx_get_result+0x1c8>)
 80020dc:	4413      	add	r3, r2
 80020de:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80020e2:	7aba      	ldrb	r2, [r7, #10]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f4ff af6f 	bcc.w	8001fc8 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	3301      	adds	r3, #1
 80020ee:	72fb      	strb	r3, [r7, #11]
 80020f0:	7a3b      	ldrb	r3, [r7, #8]
 80020f2:	7afa      	ldrb	r2, [r7, #11]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f4ff af55 	bcc.w	8001fa4 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	20001490 	.word	0x20001490

0800210c <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d002      	beq.n	8002122 <vl53l8cx_map_target_status+0x16>
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b09      	cmp	r3, #9
 8002120:	d102      	bne.n	8002128 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e007      	b.n	8002138 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800212e:	23ff      	movs	r3, #255	@ 0xff
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	e001      	b.n	8002138 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	461a      	mov	r2, r3
 8002154:	4603      	mov	r3, r0
 8002156:	70fb      	strb	r3, [r7, #3]
 8002158:	460b      	mov	r3, r1
 800215a:	70bb      	strb	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8002168:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	8839      	ldrh	r1, [r7, #0]
 8002174:	f7ff fa52 	bl	800161c <VL53L8CX_RdMulti>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	4313      	orrs	r3, r2
 8002180:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	210a      	movs	r1, #10
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fa95 	bl	80016b6 <VL53L8CX_WaitMs>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	4313      	orrs	r3, r2
 8002194:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	2bc7      	cmp	r3, #199	@ 0xc7
 800219a:	d904      	bls.n	80021a6 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
			break;
 80021a4:	e01a      	b.n	80021dc <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d909      	bls.n	80021c0 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80021b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80021b4:	d904      	bls.n	80021c0 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80021bc:	73fb      	strb	r3, [r7, #15]
			break;
 80021be:	e00d      	b.n	80021dc <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	3301      	adds	r3, #1
 80021c4:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80021d0:	7e3b      	ldrb	r3, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	7f3a      	ldrb	r2, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1c5      	bne.n	8002168 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f107 020b 	add.w	r2, r7, #11
 80021fc:	2106      	movs	r1, #6
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f9ca 	bl	8001598 <VL53L8CX_RdByte>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4313      	orrs	r3, r2
 800220c:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	da10      	bge.n	8002238 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f107 020a 	add.w	r2, r7, #10
 800221c:	2107      	movs	r1, #7
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f9ba 	bl	8001598 <VL53L8CX_RdByte>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4313      	orrs	r3, r2
 800222c:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 800222e:	7abb      	ldrb	r3, [r7, #10]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d111      	bne.n	800225c <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa3a 	bl	80016b6 <VL53L8CX_WaitMs>
		timeout++;
 8002242:	89bb      	ldrh	r3, [r7, #12]
 8002244:	3301      	adds	r3, #1
 8002246:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8002252:	89bb      	ldrh	r3, [r7, #12]
 8002254:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002258:	d3cd      	bcc.n	80021f6 <_vl53l8cx_poll_for_mcu_boot+0x10>
 800225a:	e002      	b.n	8002262 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8002260:	bf00      	nop

   return status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0ea      	sub	sp, #424	@ 0x1a8
 8002270:	af02      	add	r7, sp, #8
 8002272:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002276:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800227a:	6018      	str	r0, [r3, #0]
 800227c:	460a      	mov	r2, r1
 800227e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002282:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002286:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800228e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002292:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002296:	4ad9      	ldr	r2, [pc, #868]	@ (80025fc <_vl53l8cx_send_offset_data+0x390>)
 8002298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800229c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80022a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022a8:	4ad5      	ldr	r2, [pc, #852]	@ (8002600 <_vl53l8cx_send_offset_data+0x394>)
 80022aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ae:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80022b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 80022c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80022cc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80022d0:	4619      	mov	r1, r3
 80022d2:	f005 fa76 	bl	80077c2 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 80022d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022da:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	f040 8122 	bne.w	800252a <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80022e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 80022f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022fc:	cb03      	ldmia	r3!, {r0, r1}
 80022fe:	6010      	str	r0, [r2, #0]
 8002300:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8002302:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002306:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002310:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f998 	bl	800164a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800231a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800231e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8002328:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800232c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002330:	4618      	mov	r0, r3
 8002332:	f005 fa46 	bl	80077c2 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8002336:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800233a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	4618      	mov	r0, r3
 800234c:	f005 fa39 	bl	80077c2 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002350:	2300      	movs	r3, #0
 8002352:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002356:	e0ac      	b.n	80024b2 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800235e:	e09c      	b.n	800249a <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002360:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002364:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	005a      	lsls	r2, r3, #1
 800236e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800237a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800237e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800238e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002396:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002398:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800239c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	3304      	adds	r3, #4
 80023a6:	0059      	lsls	r1, r3, #1
 80023a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023b4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80023b6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80023ba:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	f103 0109 	add.w	r1, r3, #9
 80023c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023d4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80023d6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80023da:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80023e2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80023e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80023e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80023f0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80023f4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	005a      	lsls	r2, r3, #1
 80023fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002402:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002406:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800240a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800240c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002410:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002420:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002424:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002428:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800242a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800242e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	440a      	add	r2, r1
 8002436:	3204      	adds	r2, #4
 8002438:	0051      	lsls	r1, r2, #1
 800243a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800243e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002442:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002446:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002448:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800244c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002450:	00d2      	lsls	r2, r2, #3
 8002452:	440a      	add	r2, r1
 8002454:	0052      	lsls	r2, r2, #1
 8002456:	f102 0109 	add.w	r1, r2, #9
 800245a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800245e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002462:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002466:	4413      	add	r3, r2
                                  /(int16_t)4;
 8002468:	2b00      	cmp	r3, #0
 800246a:	da00      	bge.n	800246e <_vl53l8cx_send_offset_data+0x202>
 800246c:	3303      	adds	r3, #3
 800246e:	109b      	asrs	r3, r3, #2
 8002470:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8002472:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002476:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	b209      	sxth	r1, r1
 8002480:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002484:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002488:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800248c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800249a:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f77f af5e 	ble.w	8002360 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80024a4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80024b2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	f77f af4e 	ble.w	8002358 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	3320      	adds	r3, #32
 80024c2:	2260      	movs	r2, #96	@ 0x60
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 f900 	bl	80076cc <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80024cc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80024d0:	3340      	adds	r3, #64	@ 0x40
 80024d2:	22c0      	movs	r2, #192	@ 0xc0
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 f8f8 	bl	80076cc <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80024dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 80024ea:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80024ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 f965 	bl	80077c2 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80024f8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80024fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8002506:	f107 0118 	add.w	r1, r7, #24
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	4618      	mov	r0, r3
 800250e:	f005 f958 	bl	80077c2 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8002512:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002516:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002520:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f890 	bl	800164a <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800252a:	2300      	movs	r3, #0
 800252c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002530:	e01b      	b.n	800256a <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8002532:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002536:	f103 0208 	add.w	r2, r3, #8
 800253a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800253e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8002542:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	440a      	add	r2, r1
 800254a:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 800254e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002552:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	460a      	mov	r2, r1
 800255c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002560:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002564:	3301      	adds	r3, #1
 8002566:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800256a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800256e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8002572:	d3de      	bcc.n	8002532 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8002574:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002578:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 8002582:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002586:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800258a:	cb03      	ldmia	r3!, {r0, r1}
 800258c:	6010      	str	r0, [r2, #0]
 800258e:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8002590:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002594:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800259e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80025a8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80025ac:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80025b0:	f7ff f81d 	bl	80015ee <VL53L8CX_WrMulti>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80025bc:	4313      	orrs	r3, r2
 80025be:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80025c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025c6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80025ca:	2303      	movs	r3, #3
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	23ff      	movs	r3, #255	@ 0xff
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80025d6:	2201      	movs	r2, #1
 80025d8:	2104      	movs	r1, #4
 80025da:	6800      	ldr	r0, [r0, #0]
 80025dc:	f7ff fdb3 	bl	8002146 <_vl53l8cx_poll_for_answer>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80025ee:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	080083c0 	.word	0x080083c0
 8002600:	080083c8 	.word	0x080083c8

08002604 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0ca      	sub	sp, #296	@ 0x128
 8002608:	af02      	add	r7, sp, #8
 800260a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800260e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002612:	6018      	str	r0, [r3, #0]
 8002614:	460a      	mov	r2, r1
 8002616:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800261a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800261e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8002626:	4a9a      	ldr	r2, [pc, #616]	@ (8002890 <_vl53l8cx_send_xtalk_data+0x28c>)
 8002628:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800262c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002630:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002634:	4a97      	ldr	r2, [pc, #604]	@ (8002894 <_vl53l8cx_send_xtalk_data+0x290>)
 8002636:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800263a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800263e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8002642:	4b95      	ldr	r3, [pc, #596]	@ (8002898 <_vl53l8cx_send_xtalk_data+0x294>)
 8002644:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002648:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800264c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 8002656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800265a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002664:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8002668:	4619      	mov	r1, r3
 800266a:	f005 f8aa 	bl	80077c2 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 800266e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002672:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b10      	cmp	r3, #16
 800267a:	f040 80d2 	bne.w	8002822 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800267e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002682:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 800268c:	461a      	mov	r2, r3
 800268e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002692:	cb03      	ldmia	r3!, {r0, r1}
 8002694:	6010      	str	r0, [r2, #0]
 8002696:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002698:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800269c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 80026a6:	461a      	mov	r2, r3
 80026a8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026ac:	cb03      	ldmia	r3!, {r0, r1}
 80026ae:	6010      	str	r0, [r2, #0]
 80026b0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80026b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80026c0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe ffc0 	bl	800164a <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80026ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 f86e 	bl	80077c2 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80026ec:	e05d      	b.n	80027aa <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80026f4:	e04e      	b.n	8002794 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80026f6:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80026fa:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	005a      	lsls	r2, r3, #1
 8002704:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002708:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800270c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002710:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002714:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002724:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800272c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800272e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002732:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	3304      	adds	r3, #4
 800273c:	0059      	lsls	r1, r3, #1
 800273e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002742:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002746:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800274a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800274c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002750:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	f103 0109 	add.w	r1, r3, #9
 800275e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002762:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002766:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800276a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800276c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002770:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8002774:	0092      	lsls	r2, r2, #2
 8002776:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002778:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800277a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800277e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8002786:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002794:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002798:	2b03      	cmp	r3, #3
 800279a:	ddac      	ble.n	80026f6 <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 800279c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80027aa:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	dd9d      	ble.n	80026ee <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	3340      	adds	r3, #64	@ 0x40
 80027b8:	22c0      	movs	r2, #192	@ 0xc0
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 ff85 	bl	80076cc <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80027c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80027d0:	f107 0108 	add.w	r1, r7, #8
 80027d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fff2 	bl	80077c2 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80027de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80027ec:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe ff2a 	bl	800164a <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80027f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002804:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002808:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800280a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800280e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 8002818:	2204      	movs	r2, #4
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f004 ff55 	bl	80076cc <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8002822:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002826:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800282a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 800282c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002830:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800283a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800283e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8002842:	f7fe fed4 	bl	80015ee <VL53L8CX_WrMulti>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800284e:	4313      	orrs	r3, r2
 8002850:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002854:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002858:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 800285c:	2303      	movs	r3, #3
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	23ff      	movs	r3, #255	@ 0xff
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002868:	2201      	movs	r2, #1
 800286a:	2104      	movs	r1, #4
 800286c:	6800      	ldr	r0, [r0, #0]
 800286e:	f7ff fc6a 	bl	8002146 <_vl53l8cx_poll_for_answer>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800287a:	4313      	orrs	r3, r2
 800287c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002880:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8002884:	4618      	mov	r0, r3
 8002886:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	080083d0 	.word	0x080083d0
 8002894:	080083d8 	.word	0x080083d8
 8002898:	0001fca0 	.word	0x0001fca0

0800289c <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80028a8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80028ac:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80028ae:	2301      	movs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a80      	ldr	r2, [pc, #512]	@ (8002abc <vl53l8cx_init+0x220>)
 80028ba:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a80      	ldr	r2, [pc, #512]	@ (8002ac0 <vl53l8cx_init+0x224>)
 80028c0:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2abc 	strb.w	r2, [r3, #2748]	@ 0xabc

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe75 	bl	80015c2 <VL53L8CX_WrByte>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	4313      	orrs	r3, r2
 80028e0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	2109      	movs	r1, #9
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fe6a 	bl	80015c2 <VL53L8CX_WrByte>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	210f      	movs	r1, #15
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fe5f 	bl	80015c2 <VL53L8CX_WrByte>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	4313      	orrs	r3, r2
 800290c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	210a      	movs	r1, #10
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fe54 	bl	80015c2 <VL53L8CX_WrByte>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	4313      	orrs	r3, r2
 8002922:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f107 0216 	add.w	r2, r7, #22
 800292a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fe32 	bl	8001598 <VL53L8CX_RdByte>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	4313      	orrs	r3, r2
 800293c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	210c      	movs	r1, #12
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fe3c 	bl	80015c2 <VL53L8CX_WrByte>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	4313      	orrs	r3, r2
 8002952:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f240 1101 	movw	r1, #257	@ 0x101
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fe30 	bl	80015c2 <VL53L8CX_WrByte>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	4313      	orrs	r3, r2
 800296a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fe24 	bl	80015c2 <VL53L8CX_WrByte>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	4313      	orrs	r3, r2
 8002982:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fe18 	bl	80015c2 <VL53L8CX_WrByte>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	4313      	orrs	r3, r2
 800299a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fe0c 	bl	80015c2 <VL53L8CX_WrByte>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fe00 	bl	80015c2 <VL53L8CX_WrByte>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fdf4 	bl	80015c2 <VL53L8CX_WrByte>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f240 1103 	movw	r1, #259	@ 0x103
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fde8 	bl	80015c2 <VL53L8CX_WrByte>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	210c      	movs	r1, #12
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fddd 	bl	80015c2 <VL53L8CX_WrByte>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2243      	movs	r2, #67	@ 0x43
 8002a16:	210f      	movs	r1, #15
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fdd2 	bl	80015c2 <VL53L8CX_WrByte>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fe42 	bl	80016b6 <VL53L8CX_WaitMs>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	210f      	movs	r1, #15
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fdbd 	bl	80015c2 <VL53L8CX_WrByte>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	210a      	movs	r1, #10
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fdb2 	bl	80015c2 <VL53L8CX_WrByte>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2164      	movs	r1, #100	@ 0x64
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fe22 	bl	80016b6 <VL53L8CX_WaitMs>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fd9c 	bl	80015c2 <VL53L8CX_WrByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002a94:	2301      	movs	r3, #1
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	23ff      	movs	r3, #255	@ 0xff
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2306      	movs	r3, #6
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fb4f 	bl	8002146 <_vl53l8cx_poll_for_answer>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8309 	bne.w	80030cc <vl53l8cx_init+0x830>
 8002aba:	e003      	b.n	8002ac4 <vl53l8cx_init+0x228>
 8002abc:	0801d800 	.word	0x0801d800
 8002ac0:	0801d434 	.word	0x0801d434
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	210e      	movs	r1, #14
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fd79 	bl	80015c2 <VL53L8CX_WrByte>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fd6d 	bl	80015c2 <VL53L8CX_WrByte>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fd61 	bl	80015c2 <VL53L8CX_WrByte>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2106      	movs	r1, #6
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fd56 	bl	80015c2 <VL53L8CX_WrByte>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 8002b20:	2304      	movs	r3, #4
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	23ff      	movs	r3, #255	@ 0xff
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2321      	movs	r3, #33	@ 0x21
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fb09 	bl	8002146 <_vl53l8cx_poll_for_answer>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd3b 	bl	80015c2 <VL53L8CX_WrByte>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f107 0216 	add.w	r2, r7, #22
 8002b5c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fd19 	bl	8001598 <VL53L8CX_RdByte>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	210c      	movs	r1, #12
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd23 	bl	80015c2 <VL53L8CX_WrByte>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fd17 	bl	80015c2 <VL53L8CX_WrByte>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f240 1101 	movw	r1, #257	@ 0x101
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fd0b 	bl	80015c2 <VL53L8CX_WrByte>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fcff 	bl	80015c2 <VL53L8CX_WrByte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fcf3 	bl	80015c2 <VL53L8CX_WrByte>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fce7 	bl	80015c2 <VL53L8CX_WrByte>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fcdb 	bl	80015c2 <VL53L8CX_WrByte>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fccf 	bl	80015c2 <VL53L8CX_WrByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f240 1103 	movw	r1, #259	@ 0x103
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fcc3 	bl	80015c2 <VL53L8CX_WrByte>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f244 010f 	movw	r1, #16399	@ 0x400f
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fcb7 	bl	80015c2 <VL53L8CX_WrByte>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2243      	movs	r2, #67	@ 0x43
 8002c62:	f240 211a 	movw	r1, #538	@ 0x21a
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fcab 	bl	80015c2 <VL53L8CX_WrByte>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f240 211a 	movw	r1, #538	@ 0x21a
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fc9f 	bl	80015c2 <VL53L8CX_WrByte>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f240 211a 	movw	r1, #538	@ 0x21a
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc93 	bl	80015c2 <VL53L8CX_WrByte>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f240 211a 	movw	r1, #538	@ 0x21a
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fc87 	bl	80015c2 <VL53L8CX_WrByte>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f240 2119 	movw	r1, #537	@ 0x219
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fc7b 	bl	80015c2 <VL53L8CX_WrByte>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f240 211b 	movw	r1, #539	@ 0x21b
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fc6f 	bl	80015c2 <VL53L8CX_WrByte>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc63 	bl	80015c2 <VL53L8CX_WrByte>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f107 0216 	add.w	r2, r7, #22
 8002d0c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fc41 	bl	8001598 <VL53L8CX_RdByte>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fc4a 	bl	80015c2 <VL53L8CX_WrByte>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2209      	movs	r2, #9
 8002d3c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fc3e 	bl	80015c2 <VL53L8CX_WrByte>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	4ade      	ldr	r2, [pc, #888]	@ (80030d0 <vl53l8cx_init+0x834>)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f7fe fc48 	bl	80015ee <VL53L8CX_WrMulti>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fc26 	bl	80015c2 <VL53L8CX_WrByte>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d86:	4ad3      	ldr	r2, [pc, #844]	@ (80030d4 <vl53l8cx_init+0x838>)
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f7fe fc30 	bl	80015ee <VL53L8CX_WrMulti>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	220b      	movs	r2, #11
 8002d9c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fc0e 	bl	80015c2 <VL53L8CX_WrByte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002db6:	4ac8      	ldr	r2, [pc, #800]	@ (80030d8 <vl53l8cx_init+0x83c>)
 8002db8:	2100      	movs	r1, #0
 8002dba:	f7fe fc18 	bl	80015ee <VL53L8CX_WrMulti>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fbf6 	bl	80015c2 <VL53L8CX_WrByte>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fbea 	bl	80015c2 <VL53L8CX_WrByte>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	2106      	movs	r1, #6
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fbdf 	bl	80015c2 <VL53L8CX_WrByte>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2105      	movs	r1, #5
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fc4f 	bl	80016b6 <VL53L8CX_WaitMs>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fbc9 	bl	80015c2 <VL53L8CX_WrByte>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f107 0216 	add.w	r2, r7, #22
 8002e40:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fba7 	bl	8001598 <VL53L8CX_RdByte>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	210c      	movs	r1, #12
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fbb1 	bl	80015c2 <VL53L8CX_WrByte>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fba5 	bl	80015c2 <VL53L8CX_WrByte>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fb99 	bl	80015c2 <VL53L8CX_WrByte>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f240 1115 	movw	r1, #277	@ 0x115
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fb8d 	bl	80015c2 <VL53L8CX_WrByte>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2242      	movs	r2, #66	@ 0x42
 8002eb6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fb81 	bl	80015c2 <VL53L8CX_WrByte>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f240 1117 	movw	r1, #279	@ 0x117
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fb75 	bl	80015c2 <VL53L8CX_WrByte>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	210b      	movs	r1, #11
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fb6a 	bl	80015c2 <VL53L8CX_WrByte>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f107 0216 	add.w	r2, r7, #22
 8002efe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fb48 	bl	8001598 <VL53L8CX_RdByte>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	210c      	movs	r1, #12
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fb52 	bl	80015c2 <VL53L8CX_WrByte>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	210b      	movs	r1, #11
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fb47 	bl	80015c2 <VL53L8CX_WrByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff f951 	bl	80021e6 <_vl53l8cx_poll_for_mcu_boot>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 80c9 	bne.w	80030e8 <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fb2f 	bl	80015c2 <VL53L8CX_WrByte>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8002f6e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8002f76:	2304      	movs	r3, #4
 8002f78:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002f7c:	f7fe fb4e 	bl	800161c <VL53L8CX_RdMulti>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002f90:	2104      	movs	r1, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fb59 	bl	800164a <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80030dc <vl53l8cx_init+0x840>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	f043 0305 	orr.w	r3, r3, #5
 8002fb0:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8002fb2:	e09a      	b.n	80030ea <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	2328      	movs	r3, #40	@ 0x28
 8002fb8:	4a49      	ldr	r2, [pc, #292]	@ (80030e0 <vl53l8cx_init+0x844>)
 8002fba:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8002fbe:	f7fe fb16 	bl	80015ee <VL53L8CX_WrMulti>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8002fcc:	2302      	movs	r3, #2
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	23ff      	movs	r3, #255	@ 0xff
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2104      	movs	r1, #4
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff f8b2 	bl	8002146 <_vl53l8cx_poll_for_answer>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002fec:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8002ff4:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8002ff8:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002ffc:	f7fe fb0e 	bl	800161c <VL53L8CX_RdMulti>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	4313      	orrs	r3, r2
 8003008:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f103 0020 	add.w	r0, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003016:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800301a:	4619      	mov	r1, r3
 800301c:	f004 fbd1 	bl	80077c2 <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8003020:	2110      	movs	r1, #16
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff f922 	bl	800226c <_vl53l8cx_send_offset_data>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	4313      	orrs	r3, r2
 8003030:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003038:	4a2a      	ldr	r2, [pc, #168]	@ (80030e4 <vl53l8cx_init+0x848>)
 800303a:	4618      	mov	r0, r3
 800303c:	4611      	mov	r1, r2
 800303e:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003042:	461a      	mov	r2, r3
 8003044:	f004 fbbd 	bl	80077c2 <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8003048:	2110      	movs	r1, #16
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fada 	bl	8002604 <_vl53l8cx_send_xtalk_data>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	4313      	orrs	r3, r2
 8003058:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003064:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003068:	f7fe fac1 	bl	80015ee <VL53L8CX_WrMulti>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	4313      	orrs	r3, r2
 8003074:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003076:	2303      	movs	r3, #3
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	23ff      	movs	r3, #255	@ 0xff
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003082:	2201      	movs	r2, #1
 8003084:	2104      	movs	r1, #4
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff f85d 	bl	8002146 <_vl53l8cx_poll_for_answer>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	4313      	orrs	r3, r2
 8003094:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8003096:	f107 0110 	add.w	r1, r7, #16
 800309a:	2304      	movs	r3, #4
 800309c:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 f87f 	bl	80041a4 <vl53l8cx_dci_write_data>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80030b0:	f107 010c 	add.w	r1, r7, #12
 80030b4:	2304      	movs	r3, #4
 80030b6:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f001 f872 	bl	80041a4 <vl53l8cx_dci_write_data>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	75fb      	strb	r3, [r7, #23]
 80030ca:	e00e      	b.n	80030ea <vl53l8cx_init+0x84e>
		goto exit;
 80030cc:	bf00      	nop
 80030ce:	e00c      	b.n	80030ea <vl53l8cx_init+0x84e>
 80030d0:	08008434 	.word	0x08008434
 80030d4:	08010434 	.word	0x08010434
 80030d8:	08018434 	.word	0x08018434
 80030dc:	0c0b6c9e 	.word	0x0c0b6c9e
 80030e0:	0801db08 	.word	0x0801db08
 80030e4:	0801d800 	.word	0x0801d800
		goto exit;
 80030e8:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fa58 	bl	80015c2 <VL53L8CX_WrByte>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	4313      	orrs	r3, r2
 800311a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	2104      	movs	r1, #4
 800312a:	f7fe fa4a 	bl	80015c2 <VL53L8CX_WrByte>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	4313      	orrs	r3, r2
 8003136:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	801a      	strh	r2, [r3, #0]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fa3b 	bl	80015c2 <VL53L8CX_WrByte>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	4313      	orrs	r3, r2
 8003154:	73fb      	strb	r3, [r7, #15]

	return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fa23 	bl	80015c2 <VL53L8CX_WrByte>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	4313      	orrs	r3, r2
 8003184:	73fb      	strb	r3, [r7, #15]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x009, &tmp);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f107 020e 	add.w	r2, r7, #14
 800318c:	2109      	movs	r1, #9
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fa02 	bl	8001598 <VL53L8CX_RdByte>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	4313      	orrs	r3, r2
 800319c:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d005      	beq.n	80031b0 <vl53l8cx_get_power_mode+0x50>
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11a      	bne.n	80031de <vl53l8cx_get_power_mode+0x7e>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
			break;
 80031ae:	e01c      	b.n	80031ea <vl53l8cx_get_power_mode+0x8a>
		case 0x2:
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &tmp);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f107 020e 	add.w	r2, r7, #14
 80031b6:	210f      	movs	r1, #15
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe f9ed 	bl	8001598 <VL53L8CX_RdByte>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	73fb      	strb	r3, [r7, #15]
			if(tmp == 0x43)
 80031c8:	7bbb      	ldrb	r3, [r7, #14]
 80031ca:	2b43      	cmp	r3, #67	@ 0x43
 80031cc:	d103      	bne.n	80031d6 <vl53l8cx_get_power_mode+0x76>
			{
				*p_power_mode = VL53L8CX_POWER_MODE_DEEP_SLEEP;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]
			else
			{
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
			}

			break;
 80031d4:	e009      	b.n	80031ea <vl53l8cx_get_power_mode+0x8a>
				*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
			break;
 80031dc:	e005      	b.n	80031ea <vl53l8cx_get_power_mode+0x8a>
		default:
			*p_power_mode = 0;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 80031e4:	23ff      	movs	r3, #255	@ 0xff
 80031e6:	73fb      	strb	r3, [r7, #15]
			break;
 80031e8:	bf00      	nop
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe f9e5 	bl	80015c2 <VL53L8CX_WrByte>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4313      	orrs	r3, r2
 8003200:	73fb      	strb	r3, [r7, #15]

	return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, stored_mode, status = VL53L8CX_STATUS_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 800321c:	f107 030e 	add.w	r3, r7, #14
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff9c 	bl	8003160 <vl53l8cx_get_power_mode>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	4313      	orrs	r3, r2
 8003230:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8003232:	7bbb      	ldrb	r3, [r7, #14]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	429a      	cmp	r2, r3
 8003238:	f000 80c0 	beq.w	80033bc <vl53l8cx_set_power_mode+0x1b0>
	{
	switch(power_mode)
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d07a      	beq.n	8003338 <vl53l8cx_set_power_mode+0x12c>
 8003242:	2b02      	cmp	r3, #2
 8003244:	f300 80aa 	bgt.w	800339c <vl53l8cx_set_power_mode+0x190>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d04e      	beq.n	80032ea <vl53l8cx_set_power_mode+0xde>
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 80a5 	bne.w	800339c <vl53l8cx_set_power_mode+0x190>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f9b1 	bl	80015c2 <VL53L8CX_WrByte>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	4313      	orrs	r3, r2
 8003268:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	2109      	movs	r1, #9
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe f9a6 	bl	80015c2 <VL53L8CX_WrByte>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	4313      	orrs	r3, r2
 800327e:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x000F, &stored_mode);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f107 020d 	add.w	r2, r7, #13
 8003286:	210f      	movs	r1, #15
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe f985 	bl	8001598 <VL53L8CX_RdByte>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	4313      	orrs	r3, r2
 8003296:	73fb      	strb	r3, [r7, #15]
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 8003298:	7b7b      	ldrb	r3, [r7, #13]
 800329a:	2b43      	cmp	r3, #67	@ 0x43
 800329c:	d10a      	bne.n	80032b4 <vl53l8cx_set_power_mode+0xa8>
			{
				status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2240      	movs	r2, #64	@ 0x40
 80032a2:	210f      	movs	r1, #15
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe f98c 	bl	80015c2 <VL53L8CX_WrByte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	73fb      	strb	r3, [r7, #15]
			}
			status |= _vl53l8cx_poll_for_answer(
 80032b4:	2301      	movs	r3, #1
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2306      	movs	r3, #6
 80032be:	2200      	movs	r2, #0
 80032c0:	2101      	movs	r1, #1
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe ff3f 	bl	8002146 <_vl53l8cx_poll_for_answer>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			if(stored_mode == 0x43) /* Only for deep sleep mode */
 80032d2:	7b7b      	ldrb	r3, [r7, #13]
 80032d4:	2b43      	cmp	r3, #67	@ 0x43
 80032d6:	d164      	bne.n	80033a2 <vl53l8cx_set_power_mode+0x196>
			{
				status |= vl53l8cx_init(p_dev);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fadf 	bl	800289c <vl53l8cx_init>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80032e8:	e05b      	b.n	80033a2 <vl53l8cx_set_power_mode+0x196>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe f965 	bl	80015c2 <VL53L8CX_WrByte>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	4313      	orrs	r3, r2
 8003300:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	2109      	movs	r1, #9
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe f95a 	bl	80015c2 <VL53L8CX_WrByte>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	4313      	orrs	r3, r2
 8003316:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8003318:	2300      	movs	r3, #0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2301      	movs	r3, #1
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2306      	movs	r3, #6
 8003322:	2200      	movs	r2, #0
 8003324:	2101      	movs	r1, #1
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe ff0d 	bl	8002146 <_vl53l8cx_poll_for_answer>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	4313      	orrs	r3, r2
 8003334:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8003336:	e035      	b.n	80033a4 <vl53l8cx_set_power_mode+0x198>

		case VL53L8CX_POWER_MODE_DEEP_SLEEP:
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe f93e 	bl	80015c2 <VL53L8CX_WrByte>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	4313      	orrs	r3, r2
 800334e:	73fb      	strb	r3, [r7, #15]
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x02);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	2109      	movs	r1, #9
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe f933 	bl	80015c2 <VL53L8CX_WrByte>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	4313      	orrs	r3, r2
 8003364:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8003366:	2300      	movs	r3, #0
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2301      	movs	r3, #1
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2306      	movs	r3, #6
 8003370:	2200      	movs	r2, #0
 8003372:	2101      	movs	r1, #1
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fe fee6 	bl	8002146 <_vl53l8cx_poll_for_answer>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4313      	orrs	r3, r2
 8003382:	73fb      	strb	r3, [r7, #15]
					p_dev, 1, 0, 0x06, 0x01, 0);
			status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2243      	movs	r2, #67	@ 0x43
 8003388:	210f      	movs	r1, #15
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f919 	bl	80015c2 <VL53L8CX_WrByte>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	4313      	orrs	r3, r2
 8003398:	73fb      	strb	r3, [r7, #15]
			break;
 800339a:	e003      	b.n	80033a4 <vl53l8cx_set_power_mode+0x198>

		default:
			status = VL53L8CX_STATUS_ERROR;
 800339c:	23ff      	movs	r3, #255	@ 0xff
 800339e:	73fb      	strb	r3, [r7, #15]
			break;
 80033a0:	e000      	b.n	80033a4 <vl53l8cx_set_power_mode+0x198>
			break;
 80033a2:	bf00      	nop
		}
		status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe f908 	bl	80015c2 <VL53L8CX_WrByte>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b09c      	sub	sp, #112	@ 0x70
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80033d6:	2300      	movs	r3, #0
 80033d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80033da:	2300      	movs	r3, #0
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80033de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 80033e4:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fcaa 	bl	8003d44 <vl53l8cx_get_resolution>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	22ff      	movs	r2, #255	@ 0xff
 8003408:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800340a:	4bb8      	ldr	r3, [pc, #736]	@ (80036ec <vl53l8cx_start_ranging+0x324>)
 800340c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8003416:	4bb6      	ldr	r3, [pc, #728]	@ (80036f0 <vl53l8cx_start_ranging+0x328>)
 8003418:	f107 040c 	add.w	r4, r7, #12
 800341c:	461d      	mov	r5, r3
 800341e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003426:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800342a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 800342e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003430:	3308      	adds	r3, #8
 8003432:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	3310      	adds	r3, #16
 8003438:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800343a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343c:	3320      	adds	r3, #32
 800343e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003442:	3340      	adds	r3, #64	@ 0x40
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8003446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003448:	3380      	adds	r3, #128	@ 0x80
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 800344c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003456:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 800345c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003462:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8003464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800346c:	2300      	movs	r3, #0
 800346e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003470:	e073      	b.n	800355a <vl53l8cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8003472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3368      	adds	r3, #104	@ 0x68
 8003478:	443b      	add	r3, r7
 800347a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d067      	beq.n	8003552 <vl53l8cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8003482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3368      	adds	r3, #104	@ 0x68
 800348a:	443b      	add	r3, r7
 800348c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8003490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d057      	beq.n	8003552 <vl53l8cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80034a2:	f107 020c 	add.w	r2, r7, #12
 80034a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80034ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03a      	beq.n	8003532 <vl53l8cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d833      	bhi.n	8003532 <vl53l8cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80034ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034cc:	885b      	ldrh	r3, [r3, #2]
 80034ce:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d910      	bls.n	80034f8 <vl53l8cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80034d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d8:	885b      	ldrh	r3, [r3, #2]
 80034da:	f645 028f 	movw	r2, #22671	@ 0x588f
 80034de:	4293      	cmp	r3, r2
 80034e0:	d80a      	bhi.n	80034f8 <vl53l8cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 80034e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	b299      	uxth	r1, r3
 80034ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034ee:	8813      	ldrh	r3, [r2, #0]
 80034f0:	f361 130f 	bfi	r3, r1, #4, #12
 80034f4:	8013      	strh	r3, [r2, #0]
 80034f6:	e009      	b.n	800350c <vl53l8cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80034f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	b299      	uxth	r1, r3
 8003502:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003504:	8813      	ldrh	r3, [r2, #0]
 8003506:	f361 130f 	bfi	r3, r1, #4, #12
 800350a:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	4611      	mov	r1, r2
 800351c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800351e:	8812      	ldrh	r2, [r2, #0]
 8003520:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003524:	b292      	uxth	r2, r2
 8003526:	fb01 f202 	mul.w	r2, r1, r2
 800352a:	441a      	add	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	615a      	str	r2, [r3, #20]
 8003530:	e009      	b.n	8003546 <vl53l8cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003538:	8812      	ldrh	r2, [r2, #0]
 800353a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800353e:	b292      	uxth	r2, r2
 8003540:	441a      	add	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	1d1a      	adds	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	e000      	b.n	8003554 <vl53l8cx_start_ranging+0x18c>
			continue;
 8003552:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003556:	3301      	adds	r3, #1
 8003558:	663b      	str	r3, [r7, #96]	@ 0x60
 800355a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355c:	2b0b      	cmp	r3, #11
 800355e:	d988      	bls.n	8003472 <vl53l8cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f103 0218 	add.w	r2, r3, #24
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 800356c:	f107 010c 	add.w	r1, r7, #12
 8003570:	2330      	movs	r3, #48	@ 0x30
 8003572:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fe14 	bl	80041a4 <vl53l8cx_dci_write_data>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003584:	4313      	orrs	r3, r2
 8003586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8003590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003592:	3301      	adds	r3, #1
 8003594:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8003596:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800359a:	2308      	movs	r3, #8
 800359c:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fdff 	bl	80041a4 <vl53l8cx_dci_write_data>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 80035b4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80035b8:	2310      	movs	r3, #16
 80035ba:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fdf0 	bl	80041a4 <vl53l8cx_dci_write_data>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fff1 	bl	80015c2 <VL53L8CX_WrByte>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	2109      	movs	r1, #9
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd ffe4 	bl	80015c2 <VL53L8CX_WrByte>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003602:	4313      	orrs	r3, r2
 8003604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd ffd6 	bl	80015c2 <VL53L8CX_WrByte>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800361e:	4313      	orrs	r3, r2
 8003620:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800362a:	2304      	movs	r3, #4
 800362c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003630:	f7fd ffdd 	bl	80015ee <VL53L8CX_WrMulti>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800363c:	4313      	orrs	r3, r2
 800363e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8003642:	2303      	movs	r3, #3
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	23ff      	movs	r3, #255	@ 0xff
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800364e:	2201      	movs	r2, #1
 8003650:	2104      	movs	r1, #4
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fd77 	bl	8002146 <_vl53l8cx_poll_for_answer>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003660:	4313      	orrs	r3, r2
 8003662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 800366c:	230c      	movs	r3, #12
 800366e:	f245 4240 	movw	r2, #21568	@ 0x5440
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fd0c 	bl	8004090 <vl53l8cx_dci_read_data>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003680:	4313      	orrs	r3, r2
 8003682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8003694:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d002      	beq.n	80036a8 <vl53l8cx_start_ranging+0x2e0>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80036a2:	23ff      	movs	r3, #255	@ 0xff
 80036a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 80036ae:	2308      	movs	r3, #8
 80036b0:	f24e 02c4 	movw	r2, #57540	@ 0xe0c4
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fceb 	bl	8004090 <vl53l8cx_dci_read_data>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3516 	ldrb.w	r3, [r3, #1302]	@ 0x516
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <vl53l8cx_start_ranging+0x316>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 80036d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036d6:	f043 0303 	orr.w	r3, r3, #3
 80036da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80036de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3768      	adds	r7, #104	@ 0x68
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	080083e0 	.word	0x080083e0
 80036f0:	080083f0 	.word	0x080083f0

080036f4 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	74fb      	strb	r3, [r7, #19]
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

	status |= VL53L8CX_RdMulti(&(p_dev->platform),
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f107 020c 	add.w	r2, r7, #12
 8003712:	2304      	movs	r3, #4
 8003714:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003718:	f7fd ff80 	bl	800161c <VL53L8CX_RdMulti>
 800371c:	4603      	mov	r3, r0
 800371e:	461a      	mov	r2, r3
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	4313      	orrs	r3, r2
 8003724:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 800372c:	4293      	cmp	r3, r2
 800372e:	d04d      	beq.n	80037cc <vl53l8cx_stop_ranging+0xd8>
			&& (p_dev->is_auto_stop_enabled == (uint8_t)0))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3abc 	ldrb.w	r3, [r3, #2748]	@ 0xabc
 8003736:	2b00      	cmp	r3, #0
 8003738:	d148      	bne.n	80037cc <vl53l8cx_stop_ranging+0xd8>
	{
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd ff3d 	bl	80015c2 <VL53L8CX_WrByte>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	4313      	orrs	r3, r2
 8003750:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x16);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2216      	movs	r2, #22
 8003756:	2115      	movs	r1, #21
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd ff32 	bl	80015c2 <VL53L8CX_WrByte>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	4313      	orrs	r3, r2
 8003766:	75fb      	strb	r3, [r7, #23]
	        status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x01);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	2114      	movs	r1, #20
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd ff27 	bl	80015c2 <VL53L8CX_WrByte>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	4313      	orrs	r3, r2
 800377c:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 800377e:	e021      	b.n	80037c4 <vl53l8cx_stop_ranging+0xd0>
	        {
	        	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f107 0213 	add.w	r2, r7, #19
 8003786:	2106      	movs	r1, #6
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd ff05 	bl	8001598 <VL53L8CX_RdByte>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	4313      	orrs	r3, r2
 8003796:	75fb      	strb	r3, [r7, #23]
	        	status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	210a      	movs	r1, #10
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd ff8a 	bl	80016b6 <VL53L8CX_WaitMs>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 80037ac:	8abb      	ldrh	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 80037b2:	8abb      	ldrh	r3, [r7, #20]
 80037b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037b8:	d904      	bls.n	80037c4 <vl53l8cx_stop_ranging+0xd0>
				{
					status |= tmp;
 80037ba:	7cfa      	ldrb	r2, [r7, #19]
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	4313      	orrs	r3, r2
 80037c0:	75fb      	strb	r3, [r7, #23]
					break;
 80037c2:	e003      	b.n	80037cc <vl53l8cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	dad9      	bge.n	8003780 <vl53l8cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x6, &tmp);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f107 0213 	add.w	r2, r7, #19
 80037d2:	2106      	movs	r1, #6
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fedf 	bl	8001598 <VL53L8CX_RdByte>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da15      	bge.n	8003818 <vl53l8cx_stop_ranging+0x124>
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7, &tmp);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f107 0213 	add.w	r2, r7, #19
 80037f2:	2107      	movs	r1, #7
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fecf 	bl	8001598 <VL53L8CX_RdByte>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	4313      	orrs	r3, r2
 8003802:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b84      	cmp	r3, #132	@ 0x84
 8003808:	d006      	beq.n	8003818 <vl53l8cx_stop_ranging+0x124>
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b85      	cmp	r3, #133	@ 0x85
 800380e:	d003      	beq.n	8003818 <vl53l8cx_stop_ranging+0x124>
		   status |= tmp;
 8003810:	7cfa      	ldrb	r2, [r7, #19]
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	4313      	orrs	r3, r2
 8003816:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fece 	bl	80015c2 <VL53L8CX_WrByte>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	4313      	orrs	r3, r2
 800382e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x14, 0x00);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	2114      	movs	r1, #20
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fec3 	bl	80015c2 <VL53L8CX_WrByte>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	4313      	orrs	r3, r2
 8003844:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x15, 0x00);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	2115      	movs	r1, #21
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd feb8 	bl	80015c2 <VL53L8CX_WrByte>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	4313      	orrs	r3, r2
 800385a:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x09, 0x04);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	2109      	movs	r1, #9
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fead 	bl	80015c2 <VL53L8CX_WrByte>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	4313      	orrs	r3, r2
 8003870:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fea1 	bl	80015c2 <VL53L8CX_WrByte>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	4313      	orrs	r3, r2
 8003888:	75fb      	strb	r3, [r7, #23]

	return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80038aa:	2304      	movs	r3, #4
 80038ac:	2100      	movs	r1, #0
 80038ae:	f7fd feb5 	bl	800161c <VL53L8CX_RdMulti>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7c1b      	ldrb	r3, [r3, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d020      	beq.n	800390c <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80038d0:	2bff      	cmp	r3, #255	@ 0xff
 80038d2:	d01b      	beq.n	800390c <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d116      	bne.n	800390c <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80038e4:	f003 0305 	and.w	r3, r3, #5
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10f      	bne.n	800390c <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	741a      	strb	r2, [r3, #16]
 800390a:	e00e      	b.n	800392a <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8003912:	b25b      	sxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	da05      	bge.n	8003924 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	4313      	orrs	r3, r2
 8003922:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8003942:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2100      	movs	r1, #0
 8003950:	f7fd fe64 	bl	800161c <VL53L8CX_RdMulti>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	4313      	orrs	r3, r2
 800395c:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	741a      	strb	r2, [r3, #16]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	b29b      	uxth	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7fd fe67 	bl	800164a <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 800397c:	2310      	movs	r3, #16
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e10e      	b.n	8003ba0 <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d915      	bls.n	80039c8 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d80e      	bhi.n	80039c8 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80039be:	b29b      	uxth	r3, r3
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e005      	b.n	80039d4 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80039dc:	4293      	cmp	r3, r2
 80039de:	f000 80bb 	beq.w	8003b58 <vl53l8cx_get_ranging_data+0x224>
 80039e2:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80039e6:	4293      	cmp	r3, r2
 80039e8:	f300 80d2 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 80039ec:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f000 80a3 	beq.w	8003b3c <vl53l8cx_get_ranging_data+0x208>
 80039f6:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f300 80c8 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a00:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f000 808b 	beq.w	8003b20 <vl53l8cx_get_ranging_data+0x1ec>
 8003a0a:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f300 80be 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a14:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d073      	beq.n	8003b04 <vl53l8cx_get_ranging_data+0x1d0>
 8003a1c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003a20:	4293      	cmp	r3, r2
 8003a22:	f300 80b5 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a26:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d05c      	beq.n	8003ae8 <vl53l8cx_get_ranging_data+0x1b4>
 8003a2e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f300 80ac 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a38:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d045      	beq.n	8003acc <vl53l8cx_get_ranging_data+0x198>
 8003a40:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003a44:	4293      	cmp	r3, r2
 8003a46:	f300 80a3 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a4a:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	f000 8090 	beq.w	8003b74 <vl53l8cx_get_ranging_data+0x240>
 8003a54:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f300 8099 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a5e:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d024      	beq.n	8003ab0 <vl53l8cx_get_ranging_data+0x17c>
 8003a66:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f300 8090 	bgt.w	8003b90 <vl53l8cx_get_ranging_data+0x25c>
 8003a70:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <vl53l8cx_get_ranging_data+0x14e>
 8003a78:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00a      	beq.n	8003a96 <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003a80:	e086      	b.n	8003b90 <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	330c      	adds	r3, #12
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003a8e:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	701a      	strb	r2, [r3, #0]
				break;
 8003a94:	e07d      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f003 fe8a 	bl	80077c2 <memcpy>
				break;
 8003aae:	e070      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f003 fe7c 	bl	80077c2 <memcpy>
				break;
 8003aca:	e062      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f003 fe6e 	bl	80077c2 <memcpy>
				break;
 8003ae6:	e054      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3304      	adds	r3, #4
 8003af2:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f003 fe60 	bl	80077c2 <memcpy>
				break;
 8003b02:	e046      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f003 fe52 	bl	80077c2 <memcpy>
				break;
 8003b1e:	e038      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4619      	mov	r1, r3
 8003b36:	f003 fe44 	bl	80077c2 <memcpy>
				break;
 8003b3a:	e02a      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3304      	adds	r3, #4
 8003b46:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f003 fe36 	bl	80077c2 <memcpy>
				break;
 8003b56:	e01c      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	3304      	adds	r3, #4
 8003b62:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f003 fe28 	bl	80077c2 <memcpy>
				break;
 8003b72:	e00e      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f003 fe1a 	bl	80077c2 <memcpy>
				break;
 8003b8e:	e000      	b.n	8003b92 <vl53l8cx_get_ranging_data+0x25e>
				break;
 8003b90:	bf00      	nop
		}
		i += msize;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	f4ff aeeb 	bcc.w	8003982 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e00d      	b.n	8003bce <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0ada      	lsrs	r2, r3, #11
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bd2:	d9ee      	bls.n	8003bb2 <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e044      	b.n	8003c64 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da00      	bge.n	8003bf0 <vl53l8cx_get_ranging_data+0x2bc>
 8003bee:	3303      	adds	r3, #3
 8003bf0:	109b      	asrs	r3, r3, #2
 8003bf2:	b219      	sxth	r1, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	460a      	mov	r2, r1
 8003c02:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	b2d9      	uxtb	r1, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	09db      	lsrs	r3, r3, #7
 8003c32:	b299      	uxth	r1, r3
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	460a      	mov	r2, r1
 8003c42:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3390      	adds	r3, #144	@ 0x90
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0ada      	lsrs	r2, r3, #11
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3390      	adds	r3, #144	@ 0x90
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c68:	d9b7      	bls.n	8003bda <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e01b      	b.n	8003ca8 <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d110      	bne.n	8003ca2 <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e00a      	b.n	8003c9c <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	22ff      	movs	r2, #255	@ 0xff
 8003c92:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f1      	beq.n	8003c86 <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cac:	d9e0      	bls.n	8003c70 <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e014      	b.n	8003cde <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <vl53l8cx_get_ranging_data+0x40c>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	0bda      	lsrs	r2, r3, #15
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b1f      	cmp	r3, #31
 8003ce2:	d9e7      	bls.n	8003cb4 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003d00:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8003d12:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	89bb      	ldrh	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8003d24:	89fa      	ldrh	r2, [r7, #14]
 8003d26:	89bb      	ldrh	r3, [r7, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d003      	beq.n	8003d34 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8003d2c:	7ffb      	ldrb	r3, [r7, #31]
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	80008001 	.word	0x80008001

08003d44 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f996 	bl	8004090 <vl53l8cx_dci_read_data>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 8003d7a:	fb12 f303 	smulbb	r3, r2, r3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	701a      	strb	r2, [r3, #0]

	return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d002      	beq.n	8003daa <vl53l8cx_set_resolution+0x1c>
 8003da4:	2b40      	cmp	r3, #64	@ 0x40
 8003da6:	d055      	beq.n	8003e54 <vl53l8cx_set_resolution+0xc6>
 8003da8:	e0a9      	b.n	8003efe <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003db0:	2310      	movs	r3, #16
 8003db2:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f96a 	bl	8004090 <vl53l8cx_dci_read_data>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2240      	movs	r2, #64	@ 0x40
 8003dca:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003de4:	2310      	movs	r3, #16
 8003de6:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9da 	bl	80041a4 <vl53l8cx_dci_write_data>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003e00:	2308      	movs	r3, #8
 8003e02:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f942 	bl	8004090 <vl53l8cx_dci_read_data>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2208      	movs	r2, #8
 8003e32:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9ae 	bl	80041a4 <vl53l8cx_dci_write_data>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 8003e52:	e057      	b.n	8003f04 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f915 	bl	8004090 <vl53l8cx_dci_read_data>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2210      	movs	r2, #16
 8003e74:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003e8e:	2310      	movs	r3, #16
 8003e90:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f985 	bl	80041a4 <vl53l8cx_dci_write_data>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8003eaa:	2308      	movs	r3, #8
 8003eac:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8ed 	bl	8004090 <vl53l8cx_dci_read_data>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2208      	movs	r2, #8
 8003ecc:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2204      	movs	r2, #4
 8003edc:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f959 	bl	80041a4 <vl53l8cx_dci_write_data>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8003efc:	e002      	b.n	8003f04 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8003efe:	237f      	movs	r3, #127	@ 0x7f
 8003f00:	73fb      	strb	r3, [r7, #15]
			break;
 8003f02:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fe f9af 	bl	800226c <_vl53l8cx_send_offset_data>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fe fb71 	bl	8002604 <_vl53l8cx_send_xtalk_data>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b088      	sub	sp, #32
 8003f3a:	af04      	add	r7, sp, #16
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	2301      	movs	r3, #1
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	1cfb      	adds	r3, r7, #3
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f245 4258 	movw	r2, #21592	@ 0x5458
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9be 	bl	80042e0 <vl53l8cx_dci_replace_data>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af04      	add	r7, sp, #16
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d903      	bls.n	8003f98 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f96:	d904      	bls.n	8003fa2 <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e01a      	b.n	8003fd8 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	2304      	movs	r3, #4
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2314      	movs	r3, #20
 8003fc4:	f245 425c 	movw	r2, #21596	@ 0x545c
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f989 	bl	80042e0 <vl53l8cx_dci_replace_data>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f844 	bl	8004090 <vl53l8cx_dci_read_data>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	4313      	orrs	r3, r2
 8004010:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d002      	beq.n	800401e <vl53l8cx_set_ranging_mode+0x3c>
 8004018:	2b03      	cmp	r3, #3
 800401a:	d00b      	beq.n	8004034 <vl53l8cx_set_ranging_mode+0x52>
 800401c:	e015      	b.n	800404a <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2203      	movs	r2, #3
 800402a:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
			break;
 8004032:	e00d      	b.n	8004050 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2203      	movs	r2, #3
 8004038:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8004044:	2301      	movs	r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
			break;
 8004048:	e002      	b.n	8004050 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 800404a:	237f      	movs	r3, #127	@ 0x7f
 800404c:	73fb      	strb	r3, [r7, #15]
			break;
 800404e:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004056:	2308      	movs	r3, #8
 8004058:	f64a 5230 	movw	r2, #44336	@ 0xad30
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8a1 	bl	80041a4 <vl53l8cx_dci_write_data>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	4313      	orrs	r3, r2
 800406a:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800406c:	f107 0108 	add.w	r1, r7, #8
 8004070:	2304      	movs	r3, #4
 8004072:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f894 	bl	80041a4 <vl53l8cx_dci_write_data>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	4313      	orrs	r3, r2
 8004084:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	330c      	adds	r3, #12
 80040a8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80040aa:	4a3d      	ldr	r2, [pc, #244]	@ (80041a0 <vl53l8cx_dci_read_data+0x110>)
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80040b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80040bc:	d903      	bls.n	80040c6 <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80040be:	23ff      	movs	r3, #255	@ 0xff
 80040c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80040c4:	e065      	b.n	8004192 <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	111b      	asrs	r3, r3, #4
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f107 0214 	add.w	r2, r7, #20
 80040ec:	230c      	movs	r3, #12
 80040ee:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 80040f2:	f7fd fa7c 	bl	80015ee <VL53L8CX_WrMulti>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040fe:	4313      	orrs	r3, r2
 8004100:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8004104:	2303      	movs	r3, #3
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	23ff      	movs	r3, #255	@ 0xff
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004110:	2201      	movs	r2, #1
 8004112:	2104      	movs	r1, #4
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fe f816 	bl	8002146 <_vl53l8cx_poll_for_answer>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004122:	4313      	orrs	r3, r2
 8004124:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8004128:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8004136:	f7fd fa71 	bl	800161c <VL53L8CX_RdMulti>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004142:	4313      	orrs	r3, r2
 8004144:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800414e:	887b      	ldrh	r3, [r7, #2]
 8004150:	330c      	adds	r3, #12
 8004152:	b29b      	uxth	r3, r3
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f7fd fa77 	bl	800164a <VL53L8CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800415c:	2300      	movs	r3, #0
 800415e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004160:	e011      	b.n	8004186 <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004162:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	440b      	add	r3, r1
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	440a      	add	r2, r1
 8004174:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8004178:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800417a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800417e:	b29b      	uxth	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800418a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800418e:	429a      	cmp	r2, r3
 8004190:	dbe7      	blt.n	8004162 <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004192:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	@ 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	08008420 	.word	0x08008420

080041a4 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	@ 0x30
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041bc:	2300      	movs	r3, #0
 80041be:	753b      	strb	r3, [r7, #20]
 80041c0:	2300      	movs	r3, #0
 80041c2:	757b      	strb	r3, [r7, #21]
 80041c4:	2300      	movs	r3, #0
 80041c6:	75bb      	strb	r3, [r7, #22]
 80041c8:	230f      	movs	r3, #15
 80041ca:	75fb      	strb	r3, [r7, #23]
 80041cc:	2305      	movs	r3, #5
 80041ce:	763b      	strb	r3, [r7, #24]
 80041d0:	2301      	movs	r3, #1
 80041d2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	3308      	adds	r3, #8
 80041d8:	121b      	asrs	r3, r3, #8
 80041da:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041dc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3308      	adds	r3, #8
 80041e4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80041e6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 80041ee:	3334      	adds	r3, #52	@ 0x34
 80041f0:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80041f2:	887b      	ldrh	r3, [r7, #2]
 80041f4:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80041f8:	d903      	bls.n	8004202 <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 80041fa:	23ff      	movs	r3, #255	@ 0xff
 80041fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004200:	e068      	b.n	80042d4 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	b2db      	uxtb	r3, r3
 8004208:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	111b      	asrs	r3, r3, #4
 8004214:	b2db      	uxtb	r3, r3
 8004216:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004218:	887b      	ldrh	r3, [r7, #2]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	b2db      	uxtb	r3, r3
 8004220:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 8004222:	887b      	ldrh	r3, [r7, #2]
 8004224:	4619      	mov	r1, r3
 8004226:	68b8      	ldr	r0, [r7, #8]
 8004228:	f7fd fa0f 	bl	800164a <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	3b01      	subs	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004234:	e012      	b.n	800425c <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8004236:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	441a      	add	r2, r3
 800423e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004242:	3304      	adds	r3, #4
 8004244:	7811      	ldrb	r1, [r2, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	460a      	mov	r2, r1
 800424c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004250:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800425c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	dae8      	bge.n	8004236 <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	3304      	adds	r3, #4
 8004272:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	461a      	mov	r2, r3
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	cb03      	ldmia	r3!, {r0, r1}
 8004282:	6010      	str	r0, [r2, #0]
 8004284:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8004286:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800428e:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8004290:	330c      	adds	r3, #12
 8004292:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004294:	f7fd f9ab 	bl	80015ee <VL53L8CX_WrMulti>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80042a6:	2303      	movs	r3, #3
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	23ff      	movs	r3, #255	@ 0xff
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80042b2:	2201      	movs	r2, #1
 80042b4:	2104      	movs	r1, #4
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7fd ff45 	bl	8002146 <_vl53l8cx_poll_for_answer>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	4619      	mov	r1, r3
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	f7fd f9bb 	bl	800164a <VL53L8CX_SwapBuffer>
	}

	return status;
 80042d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3728      	adds	r7, #40	@ 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fec9 	bl	8004090 <vl53l8cx_dci_read_data>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	4313      	orrs	r3, r2
 8004306:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004308:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004310:	6a39      	ldr	r1, [r7, #32]
 8004312:	4618      	mov	r0, r3
 8004314:	f003 fa55 	bl	80077c2 <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff40 	bl	80041a4 <vl53l8cx_dci_write_data>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	4313      	orrs	r3, r2
 800432c:	75fb      	strb	r3, [r7, #23]

	return status;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af04      	add	r7, sp, #16
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8004348:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800434c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d104      	bne.n	800435e <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8004354:	2301      	movs	r3, #1
 8004356:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8004358:	2304      	movs	r3, #4
 800435a:	73bb      	strb	r3, [r7, #14]
 800435c:	e003      	b.n	8004366 <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8004362:	230c      	movs	r3, #12
 8004364:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 800436c:	2300      	movs	r3, #0
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	2304      	movs	r3, #4
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2308      	movs	r3, #8
 800437c:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ffad 	bl	80042e0 <vl53l8cx_dci_replace_data>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	4313      	orrs	r3, r2
 800438e:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8004396:	2311      	movs	r3, #17
 8004398:	9302      	str	r3, [sp, #8]
 800439a:	2301      	movs	r3, #1
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f107 030e 	add.w	r3, r7, #14
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2314      	movs	r3, #20
 80043a6:	f245 4288 	movw	r2, #21640	@ 0x5488
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ff98 	bl	80042e0 <vl53l8cx_dci_replace_data>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80043d2:	4aa7      	ldr	r2, [pc, #668]	@ (8004670 <vl53l8cx_set_detection_thresholds+0x2ac>)
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043dc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
 80043e4:	e120      	b.n	8004628 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	7a1b      	ldrb	r3, [r3, #8]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	2b12      	cmp	r3, #18
 80043ee:	f200 8117 	bhi.w	8004620 <vl53l8cx_set_detection_thresholds+0x25c>
 80043f2:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <vl53l8cx_set_detection_thresholds+0x34>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004493 	.word	0x08004493
 8004400:	08004621 	.word	0x08004621
 8004404:	080044e1 	.word	0x080044e1
 8004408:	08004621 	.word	0x08004621
 800440c:	08004621 	.word	0x08004621
 8004410:	08004621 	.word	0x08004621
 8004414:	0800452f 	.word	0x0800452f
 8004418:	08004621 	.word	0x08004621
 800441c:	08004621 	.word	0x08004621
 8004420:	08004621 	.word	0x08004621
 8004424:	08004621 	.word	0x08004621
 8004428:	0800457d 	.word	0x0800457d
 800442c:	08004621 	.word	0x08004621
 8004430:	08004621 	.word	0x08004621
 8004434:	08004621 	.word	0x08004621
 8004438:	08004621 	.word	0x08004621
 800443c:	08004621 	.word	0x08004621
 8004440:	080045cb 	.word	0x080045cb
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8004444:	7dfa      	ldrb	r2, [r7, #23]
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4413      	add	r3, r2
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	7dfa      	ldrb	r2, [r7, #23]
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	461a      	mov	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	008a      	lsls	r2, r1, #2
 8004468:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 800446a:	7dfa      	ldrb	r2, [r7, #23]
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	461a      	mov	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4413      	add	r3, r2
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	7dfa      	ldrb	r2, [r7, #23]
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	4413      	add	r3, r2
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	605a      	str	r2, [r3, #4]
				break;
 8004490:	e0c7      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004492:	7dfa      	ldrb	r2, [r7, #23]
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	461a      	mov	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	7dfa      	ldrb	r2, [r7, #23]
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	02ca      	lsls	r2, r1, #11
 80044b6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80044b8:	7dfa      	ldrb	r2, [r7, #23]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	461a      	mov	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	7dfa      	ldrb	r2, [r7, #23]
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	461a      	mov	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	02ca      	lsls	r2, r1, #11
 80044dc:	605a      	str	r2, [r3, #4]
				break;
 80044de:	e0a0      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80044e0:	7dfa      	ldrb	r2, [r7, #23]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	7dfa      	ldrb	r2, [r7, #23]
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	4413      	add	r3, r2
 8004502:	01ca      	lsls	r2, r1, #7
 8004504:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8004506:	7dfa      	ldrb	r2, [r7, #23]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	461a      	mov	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	4413      	add	r3, r2
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	7dfa      	ldrb	r2, [r7, #23]
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	461a      	mov	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4413      	add	r3, r2
 8004528:	01ca      	lsls	r2, r1, #7
 800452a:	605a      	str	r2, [r3, #4]
				break;
 800452c:	e079      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800452e:	7dfa      	ldrb	r2, [r7, #23]
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4413      	add	r3, r2
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	7dfa      	ldrb	r2, [r7, #23]
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	02ca      	lsls	r2, r1, #11
 8004552:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004554:	7dfa      	ldrb	r2, [r7, #23]
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4413      	add	r3, r2
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	7dfa      	ldrb	r2, [r7, #23]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4413      	add	r3, r2
 8004576:	02ca      	lsls	r2, r1, #11
 8004578:	605a      	str	r2, [r3, #4]
				break;
 800457a:	e052      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 800457c:	7dfa      	ldrb	r2, [r7, #23]
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4413      	add	r3, r2
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	7dfa      	ldrb	r2, [r7, #23]
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	461a      	mov	r2, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	4413      	add	r3, r2
 800459e:	020a      	lsls	r2, r1, #8
 80045a0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80045a2:	7dfa      	ldrb	r2, [r7, #23]
 80045a4:	4613      	mov	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	461a      	mov	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	7dfa      	ldrb	r2, [r7, #23]
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	461a      	mov	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	020a      	lsls	r2, r1, #8
 80045c6:	605a      	str	r2, [r3, #4]
				break;
 80045c8:	e02b      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80045ca:	7dfa      	ldrb	r2, [r7, #23]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	461a      	mov	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	7df9      	ldrb	r1, [r7, #23]
 80045de:	460b      	mov	r3, r1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	440b      	add	r3, r1
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4619      	mov	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4419      	add	r1, r3
 80045ec:	4613      	mov	r3, r2
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 80045f4:	7dfa      	ldrb	r2, [r7, #23]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	461a      	mov	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4413      	add	r3, r2
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	7df9      	ldrb	r1, [r7, #23]
 8004608:	460b      	mov	r3, r1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4619      	mov	r1, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4419      	add	r1, r3
 8004616:	4613      	mov	r3, r2
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	604b      	str	r3, [r1, #4]
				break;
 800461e:	e000      	b.n	8004622 <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8004620:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	3301      	adds	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b3f      	cmp	r3, #63	@ 0x3f
 800462c:	f67f aedb 	bls.w	80043e6 <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8004630:	f107 010c 	add.w	r1, r7, #12
 8004634:	2308      	movs	r3, #8
 8004636:	f64b 12f0 	movw	r2, #47600	@ 0xb9f0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fdb2 	bl	80041a4 <vl53l8cx_dci_write_data>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7dbb      	ldrb	r3, [r7, #22]
 8004646:	4313      	orrs	r3, r2
 8004648:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800464a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800464e:	f24b 62e8 	movw	r2, #46824	@ 0xb6e8
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fda5 	bl	80041a4 <vl53l8cx_dci_write_data>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	7dbb      	ldrb	r3, [r7, #22]
 8004660:	4313      	orrs	r3, r2
 8004662:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8004664:	7dbb      	ldrb	r3, [r7, #22]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	0800842c 	.word	0x0800842c

08004674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004678:	4b06      	ldr	r3, [pc, #24]	@ (8004694 <SystemInit+0x20>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467e:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <SystemInit+0x20>)
 8004680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800469c:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_Init+0x40>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <HAL_Init+0x40>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <HAL_Init+0x40>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0a      	ldr	r2, [pc, #40]	@ (80046d8 <HAL_Init+0x40>)
 80046ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046b4:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <HAL_Init+0x40>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a07      	ldr	r2, [pc, #28]	@ (80046d8 <HAL_Init+0x40>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c0:	2003      	movs	r0, #3
 80046c2:	f000 f94f 	bl	8004964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046c6:	2000      	movs	r0, #0
 80046c8:	f000 f808 	bl	80046dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046cc:	f7fc fc2a 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00

080046dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046e4:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <HAL_InitTick+0x54>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b12      	ldr	r3, [pc, #72]	@ (8004734 <HAL_InitTick+0x58>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f967 	bl	80049ce <HAL_SYSTICK_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e00e      	b.n	8004728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d80a      	bhi.n	8004726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004710:	2200      	movs	r2, #0
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004718:	f000 f92f 	bl	800497a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800471c:	4a06      	ldr	r2, [pc, #24]	@ (8004738 <HAL_InitTick+0x5c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	2000003c 	.word	0x2000003c
 8004734:	20000044 	.word	0x20000044
 8004738:	20000040 	.word	0x20000040

0800473c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_IncTick+0x20>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_IncTick+0x24>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4413      	add	r3, r2
 800474c:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <HAL_IncTick+0x24>)
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000044 	.word	0x20000044
 8004760:	200019e0 	.word	0x200019e0

08004764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return uwTick;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_GetTick+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	200019e0 	.word	0x200019e0

0800477c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004784:	f7ff ffee 	bl	8004764 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004794:	d005      	beq.n	80047a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004796:	4b0a      	ldr	r3, [pc, #40]	@ (80047c0 <HAL_Delay+0x44>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047a2:	bf00      	nop
 80047a4:	f7ff ffde 	bl	8004764 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d8f7      	bhi.n	80047a4 <HAL_Delay+0x28>
  {
  }
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000044 	.word	0x20000044

080047c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047e0:	4013      	ands	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047f6:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <__NVIC_SetPriorityGrouping+0x44>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	60d3      	str	r3, [r2, #12]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004810:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <__NVIC_GetPriorityGrouping+0x18>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f003 0307 	and.w	r3, r3, #7
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db0b      	blt.n	8004852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	4907      	ldr	r1, [pc, #28]	@ (8004860 <__NVIC_EnableIRQ+0x38>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2001      	movs	r0, #1
 800484a:	fa00 f202 	lsl.w	r2, r0, r2
 800484e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e100 	.word	0xe000e100

08004864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	db0a      	blt.n	800488e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	490c      	ldr	r1, [pc, #48]	@ (80048b0 <__NVIC_SetPriority+0x4c>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	0112      	lsls	r2, r2, #4
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	440b      	add	r3, r1
 8004888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800488c:	e00a      	b.n	80048a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4908      	ldr	r1, [pc, #32]	@ (80048b4 <__NVIC_SetPriority+0x50>)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3b04      	subs	r3, #4
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	440b      	add	r3, r1
 80048a2:	761a      	strb	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000e100 	.word	0xe000e100
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f1c3 0307 	rsb	r3, r3, #7
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	bf28      	it	cs
 80048d6:	2304      	movcs	r3, #4
 80048d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3304      	adds	r3, #4
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d902      	bls.n	80048e8 <NVIC_EncodePriority+0x30>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3b03      	subs	r3, #3
 80048e6:	e000      	b.n	80048ea <NVIC_EncodePriority+0x32>
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	401a      	ands	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	43d9      	mvns	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	4313      	orrs	r3, r2
         );
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	@ 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004930:	d301      	bcc.n	8004936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004932:	2301      	movs	r3, #1
 8004934:	e00f      	b.n	8004956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004936:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <SysTick_Config+0x40>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800493e:	210f      	movs	r1, #15
 8004940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004944:	f7ff ff8e 	bl	8004864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <SysTick_Config+0x40>)
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800494e:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <SysTick_Config+0x40>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010

08004964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff29 	bl	80047c4 <__NVIC_SetPriorityGrouping>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800498c:	f7ff ff3e 	bl	800480c <__NVIC_GetPriorityGrouping>
 8004990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7ff ff8e 	bl	80048b8 <NVIC_EncodePriority>
 800499c:	4602      	mov	r2, r0
 800499e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff5d 	bl	8004864 <__NVIC_SetPriority>
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff31 	bl	8004828 <__NVIC_EnableIRQ>
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ffa2 	bl	8004920 <SysTick_Config>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	@ 0x24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e159      	b.n	8004cb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a04:	2201      	movs	r2, #1
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	f040 8148 	bne.w	8004cb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d005      	beq.n	8004a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d130      	bne.n	8004a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	2203      	movs	r2, #3
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a70:	2201      	movs	r2, #1
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 0201 	and.w	r2, r3, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d017      	beq.n	8004ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d123      	bne.n	8004b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	08da      	lsrs	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3208      	adds	r2, #8
 8004aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	220f      	movs	r2, #15
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	08da      	lsrs	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3208      	adds	r2, #8
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 0203 	and.w	r2, r3, #3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80a2 	beq.w	8004cb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b57      	ldr	r3, [pc, #348]	@ (8004cd0 <HAL_GPIO_Init+0x2e8>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	4a56      	ldr	r2, [pc, #344]	@ (8004cd0 <HAL_GPIO_Init+0x2e8>)
 8004b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7e:	4b54      	ldr	r3, [pc, #336]	@ (8004cd0 <HAL_GPIO_Init+0x2e8>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b8a:	4a52      	ldr	r2, [pc, #328]	@ (8004cd4 <HAL_GPIO_Init+0x2ec>)
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	3302      	adds	r3, #2
 8004b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	220f      	movs	r2, #15
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4013      	ands	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a49      	ldr	r2, [pc, #292]	@ (8004cd8 <HAL_GPIO_Init+0x2f0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d019      	beq.n	8004bea <HAL_GPIO_Init+0x202>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a48      	ldr	r2, [pc, #288]	@ (8004cdc <HAL_GPIO_Init+0x2f4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_GPIO_Init+0x1fe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a47      	ldr	r2, [pc, #284]	@ (8004ce0 <HAL_GPIO_Init+0x2f8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00d      	beq.n	8004be2 <HAL_GPIO_Init+0x1fa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a46      	ldr	r2, [pc, #280]	@ (8004ce4 <HAL_GPIO_Init+0x2fc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <HAL_GPIO_Init+0x1f6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a45      	ldr	r2, [pc, #276]	@ (8004ce8 <HAL_GPIO_Init+0x300>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_GPIO_Init+0x1f2>
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	e008      	b.n	8004bec <HAL_GPIO_Init+0x204>
 8004bda:	2307      	movs	r3, #7
 8004bdc:	e006      	b.n	8004bec <HAL_GPIO_Init+0x204>
 8004bde:	2303      	movs	r3, #3
 8004be0:	e004      	b.n	8004bec <HAL_GPIO_Init+0x204>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e002      	b.n	8004bec <HAL_GPIO_Init+0x204>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_GPIO_Init+0x204>
 8004bea:	2300      	movs	r3, #0
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	f002 0203 	and.w	r2, r2, #3
 8004bf2:	0092      	lsls	r2, r2, #2
 8004bf4:	4093      	lsls	r3, r2
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bfc:	4935      	ldr	r1, [pc, #212]	@ (8004cd4 <HAL_GPIO_Init+0x2ec>)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	089b      	lsrs	r3, r3, #2
 8004c02:	3302      	adds	r3, #2
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c58:	4a24      	ldr	r2, [pc, #144]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c5e:	4b23      	ldr	r3, [pc, #140]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c82:	4a1a      	ldr	r2, [pc, #104]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c88:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cac:	4a0f      	ldr	r2, [pc, #60]	@ (8004cec <HAL_GPIO_Init+0x304>)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	f67f aea2 	bls.w	8004a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3724      	adds	r7, #36	@ 0x24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	40020000 	.word	0x40020000
 8004cdc:	40020400 	.word	0x40020400
 8004ce0:	40020800 	.word	0x40020800
 8004ce4:	40020c00 	.word	0x40020c00
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40013c00 	.word	0x40013c00

08004cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e0bb      	b.n	8004e84 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f040 80ab 	bne.w	8004e7e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d28:	4a5c      	ldr	r2, [pc, #368]	@ (8004e9c <HAL_GPIO_DeInit+0x1ac>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	220f      	movs	r2, #15
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a54      	ldr	r2, [pc, #336]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d019      	beq.n	8004d86 <HAL_GPIO_DeInit+0x96>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a53      	ldr	r2, [pc, #332]	@ (8004ea4 <HAL_GPIO_DeInit+0x1b4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_GPIO_DeInit+0x92>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a52      	ldr	r2, [pc, #328]	@ (8004ea8 <HAL_GPIO_DeInit+0x1b8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00d      	beq.n	8004d7e <HAL_GPIO_DeInit+0x8e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a51      	ldr	r2, [pc, #324]	@ (8004eac <HAL_GPIO_DeInit+0x1bc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <HAL_GPIO_DeInit+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a50      	ldr	r2, [pc, #320]	@ (8004eb0 <HAL_GPIO_DeInit+0x1c0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_GPIO_DeInit+0x86>
 8004d72:	2304      	movs	r3, #4
 8004d74:	e008      	b.n	8004d88 <HAL_GPIO_DeInit+0x98>
 8004d76:	2307      	movs	r3, #7
 8004d78:	e006      	b.n	8004d88 <HAL_GPIO_DeInit+0x98>
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e004      	b.n	8004d88 <HAL_GPIO_DeInit+0x98>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e002      	b.n	8004d88 <HAL_GPIO_DeInit+0x98>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_GPIO_DeInit+0x98>
 8004d86:	2300      	movs	r3, #0
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	f002 0203 	and.w	r2, r2, #3
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	4093      	lsls	r3, r2
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d132      	bne.n	8004dfe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d98:	4b46      	ldr	r3, [pc, #280]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	4944      	ldr	r1, [pc, #272]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004da6:	4b43      	ldr	r3, [pc, #268]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	4941      	ldr	r1, [pc, #260]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004db4:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	493d      	ldr	r1, [pc, #244]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	493a      	ldr	r1, [pc, #232]	@ (8004eb4 <HAL_GPIO_DeInit+0x1c4>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004de0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e9c <HAL_GPIO_DeInit+0x1ac>)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	3302      	adds	r3, #2
 8004de8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	43da      	mvns	r2, r3
 8004df0:	482a      	ldr	r0, [pc, #168]	@ (8004e9c <HAL_GPIO_DeInit+0x1ac>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	400a      	ands	r2, r1
 8004df8:	3302      	adds	r3, #2
 8004dfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2103      	movs	r1, #3
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	401a      	ands	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	08da      	lsrs	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3208      	adds	r2, #8
 8004e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	220f      	movs	r2, #15
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	08d2      	lsrs	r2, r2, #3
 8004e34:	4019      	ands	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3208      	adds	r2, #8
 8004e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2103      	movs	r1, #3
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	401a      	ands	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	2103      	movs	r1, #3
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	401a      	ands	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3301      	adds	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	f67f af40 	bls.w	8004d0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40020000 	.word	0x40020000
 8004ea4:	40020400 	.word	0x40020400
 8004ea8:	40020800 	.word	0x40020800
 8004eac:	40020c00 	.word	0x40020c00
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40013c00 	.word	0x40013c00

08004eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec8:	787b      	ldrb	r3, [r7, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ed4:	e003      	b.n	8004ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ed6:	887b      	ldrh	r3, [r7, #2]
 8004ed8:	041a      	lsls	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	619a      	str	r2, [r3, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ef6:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f02:	4a05      	ldr	r2, [pc, #20]	@ (8004f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fd06 	bl	800091c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013c00 	.word	0x40013c00

08004f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e12b      	b.n	8005186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f95d 	bl	8005202 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	@ 0x24
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f80:	f001 fcbe 	bl	8006900 <HAL_RCC_GetPCLK1Freq>
 8004f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	@ (8005190 <HAL_I2C_Init+0x274>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_I2C_Init+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a80      	ldr	r2, [pc, #512]	@ (8005194 <HAL_I2C_Init+0x278>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e006      	b.n	8004fae <HAL_I2C_Init+0x92>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	@ (8005198 <HAL_I2C_Init+0x27c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a78      	ldr	r2, [pc, #480]	@ (800519c <HAL_I2C_Init+0x280>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8005190 <HAL_I2C_Init+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_I2C_Init+0xd4>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3301      	adds	r3, #1
 8004fee:	e009      	b.n	8005004 <HAL_I2C_Init+0xe8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	4a69      	ldr	r2, [pc, #420]	@ (80051a0 <HAL_I2C_Init+0x284>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	3301      	adds	r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430b      	orrs	r3, r1
 800500a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005016:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	495c      	ldr	r1, [pc, #368]	@ (8005190 <HAL_I2C_Init+0x274>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d819      	bhi.n	8005058 <HAL_I2C_Init+0x13c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e59      	subs	r1, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005038:	400b      	ands	r3, r1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_I2C_Init+0x138>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e59      	subs	r1, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	e051      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005054:	2304      	movs	r3, #4
 8005056:	e04f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <HAL_I2C_Init+0x168>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e012      	b.n	80050aa <HAL_I2C_Init+0x18e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	fbb0 f3f3 	udiv	r3, r0, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Init+0x196>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e022      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_I2C_Init+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1e58      	subs	r0, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	440b      	add	r3, r1
 80050c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d6:	e00f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e58      	subs	r0, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	0099      	lsls	r1, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005126:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6911      	ldr	r1, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	000186a0 	.word	0x000186a0
 8005194:	001e847f 	.word	0x001e847f
 8005198:	003d08ff 	.word	0x003d08ff
 800519c:	431bde83 	.word	0x431bde83
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e021      	b.n	80051fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2224      	movs	r2, #36	@ 0x24
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f821 	bl	8005216 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005246:	f7ff fa8d 	bl	8004764 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	f040 80d9 	bne.w	800540c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2319      	movs	r3, #25
 8005260:	2201      	movs	r2, #1
 8005262:	496d      	ldr	r1, [pc, #436]	@ (8005418 <HAL_I2C_Mem_Write+0x1ec>)
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fca5 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	e0cc      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Mem_Write+0x56>
 800527e:	2302      	movs	r3, #2
 8005280:	e0c5      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d007      	beq.n	80052a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2221      	movs	r2, #33	@ 0x21
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	@ 0x40
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a4d      	ldr	r2, [pc, #308]	@ (800541c <HAL_I2C_Mem_Write+0x1f0>)
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ea:	88f8      	ldrh	r0, [r7, #6]
 80052ec:	893a      	ldrh	r2, [r7, #8]
 80052ee:	8979      	ldrh	r1, [r7, #10]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4603      	mov	r3, r0
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fadc 	bl	80058b8 <I2C_RequestMemoryWrite>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d052      	beq.n	80053ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e081      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fd6a 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	2b04      	cmp	r3, #4
 8005320:	d107      	bne.n	8005332 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e06b      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d11b      	bne.n	80053ac <HAL_I2C_Mem_Write+0x180>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d017      	beq.n	80053ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1aa      	bne.n	800530a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fd5d 	bl	8005e78 <I2C_WaitOnBTFFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d107      	bne.n	80053dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e016      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	00100002 	.word	0x00100002
 800541c:	ffff0000 	.word	0xffff0000

08005420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	@ 0x30
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800543a:	f7ff f993 	bl	8004764 <HAL_GetTick>
 800543e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b20      	cmp	r3, #32
 800544a:	f040 8214 	bne.w	8005876 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2319      	movs	r3, #25
 8005454:	2201      	movs	r2, #1
 8005456:	497b      	ldr	r1, [pc, #492]	@ (8005644 <HAL_I2C_Mem_Read+0x224>)
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fbab 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
 8005466:	e207      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_I2C_Mem_Read+0x56>
 8005472:	2302      	movs	r3, #2
 8005474:	e200      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d007      	beq.n	800549c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2222      	movs	r2, #34	@ 0x22
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2240      	movs	r2, #64	@ 0x40
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a5b      	ldr	r2, [pc, #364]	@ (8005648 <HAL_I2C_Mem_Read+0x228>)
 80054dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054de:	88f8      	ldrh	r0, [r7, #6]
 80054e0:	893a      	ldrh	r2, [r7, #8]
 80054e2:	8979      	ldrh	r1, [r7, #10]
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4603      	mov	r3, r0
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa78 	bl	80059e4 <I2C_RequestMemoryRead>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1bc      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005506:	2300      	movs	r3, #0
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e190      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d11b      	bne.n	800556e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e170      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005572:	2b02      	cmp	r3, #2
 8005574:	d11b      	bne.n	80055ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	e150      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055c4:	e144      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	f200 80f1 	bhi.w	80057b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d123      	bne.n	8005620 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fc93 	bl	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e145      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800561e:	e117      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	2b02      	cmp	r3, #2
 8005626:	d14e      	bne.n	80056c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	2200      	movs	r2, #0
 8005630:	4906      	ldr	r1, [pc, #24]	@ (800564c <HAL_I2C_Mem_Read+0x22c>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fabe 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e11a      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
 8005642:	bf00      	nop
 8005644:	00100002 	.word	0x00100002
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800565e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056c4:	e0c4      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	2200      	movs	r2, #0
 80056ce:	496c      	ldr	r1, [pc, #432]	@ (8005880 <HAL_I2C_Mem_Read+0x460>)
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fa6f 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0cb      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	2200      	movs	r2, #0
 800572a:	4955      	ldr	r1, [pc, #340]	@ (8005880 <HAL_I2C_Mem_Read+0x460>)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fa41 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e09d      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800574a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057b0:	e04e      	b.n	8005850 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fba6 	bl	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e058      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d124      	bne.n	8005850 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	2b03      	cmp	r3, #3
 800580c:	d107      	bne.n	800581e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800581c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f aeb6 	bne.w	80055c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e000      	b.n	8005878 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	3728      	adds	r7, #40	@ 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	00010004 	.word	0x00010004

08005884 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005892:	b2db      	uxtb	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f960 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005908:	d103      	bne.n	8005912 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005910:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e05f      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	492d      	ldr	r1, [pc, #180]	@ (80059e0 <I2C_RequestMemoryWrite+0x128>)
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f9bb 	bl	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04c      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa46 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02b      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e021      	b.n	80059d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005990:	893b      	ldrh	r3, [r7, #8]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa20 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d107      	bne.n	80059c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e005      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ca:	893b      	ldrh	r3, [r7, #8]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	00010002 	.word	0x00010002

080059e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f8c2 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a44:	d103      	bne.n	8005a4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0aa      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	4952      	ldr	r1, [pc, #328]	@ (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f91d 	bl	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e097      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a90:	6a39      	ldr	r1, [r7, #32]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f9a8 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d107      	bne.n	8005ab6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e076      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac0:	893b      	ldrh	r3, [r7, #8]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	e021      	b.n	8005b10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005acc:	893b      	ldrh	r3, [r7, #8]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f982 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e050      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b12:	6a39      	ldr	r1, [r7, #32]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f967 	bl	8005de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d107      	bne.n	8005b38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e035      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f82b 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b72:	d103      	bne.n	8005b7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e013      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	4906      	ldr	r1, [pc, #24]	@ (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f886 	bl	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc4:	e048      	b.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bcc:	d044      	beq.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fe fdc9 	bl	8004764 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d139      	bne.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d10d      	bne.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	43da      	mvns	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	e00c      	b.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	43da      	mvns	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d116      	bne.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e023      	b.n	8005ca0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10d      	bne.n	8005c7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	43da      	mvns	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	e00c      	b.n	8005c98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	43da      	mvns	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d093      	beq.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb6:	e071      	b.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc6:	d123      	bne.n	8005d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	f043 0204 	orr.w	r2, r3, #4
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e067      	b.n	8005de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d16:	d041      	beq.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d18:	f7fe fd24 	bl	8004764 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d136      	bne.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d10c      	bne.n	8005d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e00b      	b.n	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	43da      	mvns	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	f043 0220 	orr.w	r2, r3, #32
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e021      	b.n	8005de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d10c      	bne.n	8005dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	43da      	mvns	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4013      	ands	r3, r2
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	e00b      	b.n	8005dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f47f af6d 	bne.w	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df4:	e034      	b.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f8e3 	bl	8005fc2 <I2C_IsAcknowledgeFailed>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e034      	b.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0c:	d028      	beq.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fe fca9 	bl	8004764 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11d      	bne.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2e:	2b80      	cmp	r3, #128	@ 0x80
 8005e30:	d016      	beq.n	8005e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e007      	b.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6a:	2b80      	cmp	r3, #128	@ 0x80
 8005e6c:	d1c3      	bne.n	8005df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e84:	e034      	b.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f89b 	bl	8005fc2 <I2C_IsAcknowledgeFailed>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e034      	b.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9c:	d028      	beq.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fe fc61 	bl	8004764 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11d      	bne.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d016      	beq.n	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e007      	b.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d1c3      	bne.n	8005e86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f14:	e049      	b.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d119      	bne.n	8005f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0210 	mvn.w	r2, #16
 8005f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e030      	b.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f58:	f7fe fc04 	bl	8004764 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11d      	bne.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d016      	beq.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e007      	b.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	d1ae      	bne.n	8005f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd8:	d11b      	bne.n	8006012 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fe2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	f043 0204 	orr.w	r2, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e267      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d075      	beq.n	800612a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800603e:	4b88      	ldr	r3, [pc, #544]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b04      	cmp	r3, #4
 8006048:	d00c      	beq.n	8006064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800604a:	4b85      	ldr	r3, [pc, #532]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006052:	2b08      	cmp	r3, #8
 8006054:	d112      	bne.n	800607c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006056:	4b82      	ldr	r3, [pc, #520]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006062:	d10b      	bne.n	800607c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	4b7e      	ldr	r3, [pc, #504]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05b      	beq.n	8006128 <HAL_RCC_OscConfig+0x108>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d157      	bne.n	8006128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e242      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006084:	d106      	bne.n	8006094 <HAL_RCC_OscConfig+0x74>
 8006086:	4b76      	ldr	r3, [pc, #472]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a75      	ldr	r2, [pc, #468]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e01d      	b.n	80060d0 <HAL_RCC_OscConfig+0xb0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800609c:	d10c      	bne.n	80060b8 <HAL_RCC_OscConfig+0x98>
 800609e:	4b70      	ldr	r3, [pc, #448]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6f      	ldr	r2, [pc, #444]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e00b      	b.n	80060d0 <HAL_RCC_OscConfig+0xb0>
 80060b8:	4b69      	ldr	r3, [pc, #420]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a68      	ldr	r2, [pc, #416]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	4b66      	ldr	r3, [pc, #408]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a65      	ldr	r2, [pc, #404]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fe fb44 	bl	8004764 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fe fb40 	bl	8004764 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	@ 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e207      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCC_OscConfig+0xc0>
 80060fe:	e014      	b.n	800612a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fe fb30 	bl	8004764 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006108:	f7fe fb2c 	bl	8004764 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b64      	cmp	r3, #100	@ 0x64
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1f3      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800611a:	4b51      	ldr	r3, [pc, #324]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0xe8>
 8006126:	e000      	b.n	800612a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d063      	beq.n	80061fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006136:	4b4a      	ldr	r3, [pc, #296]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006142:	4b47      	ldr	r3, [pc, #284]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800614a:	2b08      	cmp	r3, #8
 800614c:	d11c      	bne.n	8006188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800614e:	4b44      	ldr	r3, [pc, #272]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615a:	4b41      	ldr	r3, [pc, #260]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_RCC_OscConfig+0x152>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e1c7      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006172:	4b3b      	ldr	r3, [pc, #236]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4937      	ldr	r1, [pc, #220]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006186:	e03a      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d020      	beq.n	80061d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006190:	4b34      	ldr	r3, [pc, #208]	@ (8006264 <HAL_RCC_OscConfig+0x244>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fe fae5 	bl	8004764 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619e:	f7fe fae1 	bl	8004764 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e1a8      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f0      	beq.n	800619e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061bc:	4b28      	ldr	r3, [pc, #160]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4925      	ldr	r1, [pc, #148]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]
 80061d0:	e015      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d2:	4b24      	ldr	r3, [pc, #144]	@ (8006264 <HAL_RCC_OscConfig+0x244>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fe fac4 	bl	8004764 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e0:	f7fe fac0 	bl	8004764 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e187      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d036      	beq.n	8006278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006212:	4b15      	ldr	r3, [pc, #84]	@ (8006268 <HAL_RCC_OscConfig+0x248>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006218:	f7fe faa4 	bl	8004764 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006220:	f7fe faa0 	bl	8004764 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e167      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006232:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <HAL_RCC_OscConfig+0x240>)
 8006234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x200>
 800623e:	e01b      	b.n	8006278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006240:	4b09      	ldr	r3, [pc, #36]	@ (8006268 <HAL_RCC_OscConfig+0x248>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006246:	f7fe fa8d 	bl	8004764 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624c:	e00e      	b.n	800626c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624e:	f7fe fa89 	bl	8004764 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d907      	bls.n	800626c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e150      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
 8006260:	40023800 	.word	0x40023800
 8006264:	42470000 	.word	0x42470000
 8006268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	4b88      	ldr	r3, [pc, #544]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800626e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1ea      	bne.n	800624e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8097 	beq.w	80063b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006286:	2300      	movs	r3, #0
 8006288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800628a:	4b81      	ldr	r3, [pc, #516]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	4b7d      	ldr	r3, [pc, #500]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	4a7c      	ldr	r2, [pc, #496]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b6:	4b77      	ldr	r3, [pc, #476]	@ (8006494 <HAL_RCC_OscConfig+0x474>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d118      	bne.n	80062f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c2:	4b74      	ldr	r3, [pc, #464]	@ (8006494 <HAL_RCC_OscConfig+0x474>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a73      	ldr	r2, [pc, #460]	@ (8006494 <HAL_RCC_OscConfig+0x474>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ce:	f7fe fa49 	bl	8004764 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fe fa45 	bl	8004764 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e10c      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006494 <HAL_RCC_OscConfig+0x474>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d106      	bne.n	800630a <HAL_RCC_OscConfig+0x2ea>
 80062fc:	4b64      	ldr	r3, [pc, #400]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006300:	4a63      	ldr	r2, [pc, #396]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6713      	str	r3, [r2, #112]	@ 0x70
 8006308:	e01c      	b.n	8006344 <HAL_RCC_OscConfig+0x324>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b05      	cmp	r3, #5
 8006310:	d10c      	bne.n	800632c <HAL_RCC_OscConfig+0x30c>
 8006312:	4b5f      	ldr	r3, [pc, #380]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006316:	4a5e      	ldr	r2, [pc, #376]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006318:	f043 0304 	orr.w	r3, r3, #4
 800631c:	6713      	str	r3, [r2, #112]	@ 0x70
 800631e:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006322:	4a5b      	ldr	r2, [pc, #364]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6713      	str	r3, [r2, #112]	@ 0x70
 800632a:	e00b      	b.n	8006344 <HAL_RCC_OscConfig+0x324>
 800632c:	4b58      	ldr	r3, [pc, #352]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	4a57      	ldr	r2, [pc, #348]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	6713      	str	r3, [r2, #112]	@ 0x70
 8006338:	4b55      	ldr	r3, [pc, #340]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633c:	4a54      	ldr	r2, [pc, #336]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800633e:	f023 0304 	bic.w	r3, r3, #4
 8006342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634c:	f7fe fa0a 	bl	8004764 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006352:	e00a      	b.n	800636a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fe fa06 	bl	8004764 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0cb      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636a:	4b49      	ldr	r3, [pc, #292]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0ee      	beq.n	8006354 <HAL_RCC_OscConfig+0x334>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006378:	f7fe f9f4 	bl	8004764 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800637e:	e00a      	b.n	8006396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006380:	f7fe f9f0 	bl	8004764 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0b5      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006396:	4b3e      	ldr	r3, [pc, #248]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1ee      	bne.n	8006380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d105      	bne.n	80063b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a8:	4b39      	ldr	r3, [pc, #228]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80063aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ac:	4a38      	ldr	r2, [pc, #224]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80063ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a1 	beq.w	8006500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063be:	4b34      	ldr	r3, [pc, #208]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d05c      	beq.n	8006484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d141      	bne.n	8006456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <HAL_RCC_OscConfig+0x478>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d8:	f7fe f9c4 	bl	8004764 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fe f9c0 	bl	8004764 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e087      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f2:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	3b01      	subs	r3, #1
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	061b      	lsls	r3, r3, #24
 8006422:	491b      	ldr	r1, [pc, #108]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006428:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <HAL_RCC_OscConfig+0x478>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642e:	f7fe f999 	bl	8004764 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006436:	f7fe f995 	bl	8004764 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e05c      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006448:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x416>
 8006454:	e054      	b.n	8006500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006456:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <HAL_RCC_OscConfig+0x478>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645c:	f7fe f982 	bl	8004764 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006464:	f7fe f97e 	bl	8004764 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e045      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006476:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCC_OscConfig+0x470>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x444>
 8006482:	e03d      	b.n	8006500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e038      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
 8006490:	40023800 	.word	0x40023800
 8006494:	40007000 	.word	0x40007000
 8006498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800649c:	4b1b      	ldr	r3, [pc, #108]	@ (800650c <HAL_RCC_OscConfig+0x4ec>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d028      	beq.n	80064fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d121      	bne.n	80064fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d11a      	bne.n	80064fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064cc:	4013      	ands	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d111      	bne.n	80064fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	3b01      	subs	r3, #1
 80064e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d107      	bne.n	80064fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800

08006510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0cc      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006524:	4b68      	ldr	r3, [pc, #416]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d90c      	bls.n	800654c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b65      	ldr	r3, [pc, #404]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b63      	ldr	r3, [pc, #396]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0b8      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d020      	beq.n	800659a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006564:	4b59      	ldr	r3, [pc, #356]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a58      	ldr	r2, [pc, #352]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800656e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800657c:	4b53      	ldr	r3, [pc, #332]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4a52      	ldr	r2, [pc, #328]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006588:	4b50      	ldr	r3, [pc, #320]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	494d      	ldr	r1, [pc, #308]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d044      	beq.n	8006630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	4b47      	ldr	r3, [pc, #284]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d119      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e07f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d003      	beq.n	80065ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ce:	4b3f      	ldr	r3, [pc, #252]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e06f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065de:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e067      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ee:	4b37      	ldr	r3, [pc, #220]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f023 0203 	bic.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4934      	ldr	r1, [pc, #208]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006600:	f7fe f8b0 	bl	8004764 <HAL_GetTick>
 8006604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	e00a      	b.n	800661e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006608:	f7fe f8ac 	bl	8004764 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e04f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661e:	4b2b      	ldr	r3, [pc, #172]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 020c 	and.w	r2, r3, #12
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	429a      	cmp	r2, r3
 800662e:	d1eb      	bne.n	8006608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006630:	4b25      	ldr	r3, [pc, #148]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d20c      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b20      	ldr	r3, [pc, #128]	@ (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e032      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006664:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4916      	ldr	r1, [pc, #88]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006682:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	490e      	ldr	r1, [pc, #56]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006696:	f000 f821 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490a      	ldr	r1, [pc, #40]	@ (80066d0 <HAL_RCC_ClockConfig+0x1c0>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	4a09      	ldr	r2, [pc, #36]	@ (80066d4 <HAL_RCC_ClockConfig+0x1c4>)
 80066b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066b2:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <HAL_RCC_ClockConfig+0x1c8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe f810 	bl	80046dc <HAL_InitTick>

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023c00 	.word	0x40023c00
 80066cc:	40023800 	.word	0x40023800
 80066d0:	0801db30 	.word	0x0801db30
 80066d4:	2000003c 	.word	0x2000003c
 80066d8:	20000040 	.word	0x20000040

080066dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e0:	b094      	sub	sp, #80	@ 0x50
 80066e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e8:	2300      	movs	r3, #0
 80066ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ec:	2300      	movs	r3, #0
 80066ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f4:	4b79      	ldr	r3, [pc, #484]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d00d      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0x40>
 8006700:	2b08      	cmp	r3, #8
 8006702:	f200 80e1 	bhi.w	80068c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0x34>
 800670a:	2b04      	cmp	r3, #4
 800670c:	d003      	beq.n	8006716 <HAL_RCC_GetSysClockFreq+0x3a>
 800670e:	e0db      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006710:	4b73      	ldr	r3, [pc, #460]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006712:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006714:	e0db      	b.n	80068ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006716:	4b73      	ldr	r3, [pc, #460]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800671a:	e0d8      	b.n	80068ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800671c:	4b6f      	ldr	r3, [pc, #444]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006726:	4b6d      	ldr	r3, [pc, #436]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d063      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006732:	4b6a      	ldr	r3, [pc, #424]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	2200      	movs	r2, #0
 800673a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30
 8006746:	2300      	movs	r3, #0
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
 800674a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800674e:	4622      	mov	r2, r4
 8006750:	462b      	mov	r3, r5
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f04f 0100 	mov.w	r1, #0
 800675a:	0159      	lsls	r1, r3, #5
 800675c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006760:	0150      	lsls	r0, r2, #5
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4621      	mov	r1, r4
 8006768:	1a51      	subs	r1, r2, r1
 800676a:	6139      	str	r1, [r7, #16]
 800676c:	4629      	mov	r1, r5
 800676e:	eb63 0301 	sbc.w	r3, r3, r1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006780:	4659      	mov	r1, fp
 8006782:	018b      	lsls	r3, r1, #6
 8006784:	4651      	mov	r1, sl
 8006786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800678a:	4651      	mov	r1, sl
 800678c:	018a      	lsls	r2, r1, #6
 800678e:	4651      	mov	r1, sl
 8006790:	ebb2 0801 	subs.w	r8, r2, r1
 8006794:	4659      	mov	r1, fp
 8006796:	eb63 0901 	sbc.w	r9, r3, r1
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ae:	4690      	mov	r8, r2
 80067b0:	4699      	mov	r9, r3
 80067b2:	4623      	mov	r3, r4
 80067b4:	eb18 0303 	adds.w	r3, r8, r3
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	462b      	mov	r3, r5
 80067bc:	eb49 0303 	adc.w	r3, r9, r3
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ce:	4629      	mov	r1, r5
 80067d0:	024b      	lsls	r3, r1, #9
 80067d2:	4621      	mov	r1, r4
 80067d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067d8:	4621      	mov	r1, r4
 80067da:	024a      	lsls	r2, r1, #9
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067e2:	2200      	movs	r2, #0
 80067e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067ec:	f7f9 fd48 	bl	8000280 <__aeabi_uldivmod>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4613      	mov	r3, r2
 80067f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f8:	e058      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fa:	4b38      	ldr	r3, [pc, #224]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	2200      	movs	r2, #0
 8006802:	4618      	mov	r0, r3
 8006804:	4611      	mov	r1, r2
 8006806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800680a:	623b      	str	r3, [r7, #32]
 800680c:	2300      	movs	r3, #0
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	f04f 0000 	mov.w	r0, #0
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	0159      	lsls	r1, r3, #5
 8006822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006826:	0150      	lsls	r0, r2, #5
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4641      	mov	r1, r8
 800682e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006832:	4649      	mov	r1, r9
 8006834:	eb63 0b01 	sbc.w	fp, r3, r1
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800684c:	ebb2 040a 	subs.w	r4, r2, sl
 8006850:	eb63 050b 	sbc.w	r5, r3, fp
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	00eb      	lsls	r3, r5, #3
 800685e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006862:	00e2      	lsls	r2, r4, #3
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	4643      	mov	r3, r8
 800686a:	18e3      	adds	r3, r4, r3
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	464b      	mov	r3, r9
 8006870:	eb45 0303 	adc.w	r3, r5, r3
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006882:	4629      	mov	r1, r5
 8006884:	028b      	lsls	r3, r1, #10
 8006886:	4621      	mov	r1, r4
 8006888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800688c:	4621      	mov	r1, r4
 800688e:	028a      	lsls	r2, r1, #10
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006896:	2200      	movs	r2, #0
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	61fa      	str	r2, [r7, #28]
 800689c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a0:	f7f9 fcee 	bl	8000280 <__aeabi_uldivmod>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4613      	mov	r3, r2
 80068aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068ac:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x200>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	3301      	adds	r3, #1
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80068bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068c6:	e002      	b.n	80068ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068c8:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3750      	adds	r7, #80	@ 0x50
 80068d4:	46bd      	mov	sp, r7
 80068d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068da:	bf00      	nop
 80068dc:	40023800 	.word	0x40023800
 80068e0:	00f42400 	.word	0x00f42400
 80068e4:	007a1200 	.word	0x007a1200

080068e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068ec:	4b03      	ldr	r3, [pc, #12]	@ (80068fc <HAL_RCC_GetHCLKFreq+0x14>)
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	2000003c 	.word	0x2000003c

08006900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006904:	f7ff fff0 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006908:	4602      	mov	r2, r0
 800690a:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	0a9b      	lsrs	r3, r3, #10
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	4903      	ldr	r1, [pc, #12]	@ (8006924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006916:	5ccb      	ldrb	r3, [r1, r3]
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40023800 	.word	0x40023800
 8006924:	0801db40 	.word	0x0801db40

08006928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800692c:	f7ff ffdc 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	0b5b      	lsrs	r3, r3, #13
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4903      	ldr	r1, [pc, #12]	@ (800694c <HAL_RCC_GetPCLK2Freq+0x24>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40023800 	.word	0x40023800
 800694c:	0801db40 	.word	0x0801db40

08006950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e042      	b.n	80069e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f83a 	bl	80069f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	@ 0x24
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa13 	bl	8006dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	@ 0x28
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d175      	bne.n	8006b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_UART_Transmit+0x2c>
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e06e      	b.n	8006b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2221      	movs	r2, #33	@ 0x21
 8006a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a42:	f7fd fe8f 	bl	8004764 <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5c:	d108      	bne.n	8006a70 <HAL_UART_Transmit+0x6c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	e003      	b.n	8006a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a78:	e02e      	b.n	8006ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2180      	movs	r1, #128	@ 0x80
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f8df 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e03a      	b.n	8006b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10b      	bne.n	8006aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e007      	b.n	8006aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1cb      	bne.n	8006a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2140      	movs	r1, #64	@ 0x40
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f8ab 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e006      	b.n	8006b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08a      	sub	sp, #40	@ 0x28
 8006b1e:	af02      	add	r7, sp, #8
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	f040 8081 	bne.w	8006c3e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_UART_Receive+0x2e>
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e079      	b.n	8006c40 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2222      	movs	r2, #34	@ 0x22
 8006b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b60:	f7fd fe00 	bl	8004764 <HAL_GetTick>
 8006b64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7a:	d108      	bne.n	8006b8e <HAL_UART_Receive+0x74>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e003      	b.n	8006b96 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b96:	e047      	b.n	8006c28 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2120      	movs	r1, #32
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f850 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e042      	b.n	8006c40 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e01f      	b.n	8006c1a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be2:	d007      	beq.n	8006bf4 <HAL_UART_Receive+0xda>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_UART_Receive+0xe8>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	e008      	b.n	8006c14 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b2      	bne.n	8006b98 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c3e:	2302      	movs	r3, #2
  }
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	e03b      	b.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c60:	d037      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fd7f 	bl	8004764 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e03a      	b.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d023      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d020      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b40      	cmp	r3, #64	@ 0x40
 8006c94:	d01d      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d116      	bne.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f81d 	bl	8006cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e00f      	b.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	2300      	movne	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d0b4      	beq.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b095      	sub	sp, #84	@ 0x54
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d119      	bne.n	8006da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d92:	61ba      	str	r2, [r7, #24]
 8006d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006db4:	bf00      	nop
 8006db6:	3754      	adds	r7, #84	@ 0x54
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc4:	b0c0      	sub	sp, #256	@ 0x100
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	68d9      	ldr	r1, [r3, #12]
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	ea40 0301 	orr.w	r3, r0, r1
 8006de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e18:	f021 010c 	bic.w	r1, r1, #12
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e26:	430b      	orrs	r3, r1
 8006e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	6999      	ldr	r1, [r3, #24]
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	ea40 0301 	orr.w	r3, r0, r1
 8006e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b8f      	ldr	r3, [pc, #572]	@ (800708c <UART_SetConfig+0x2cc>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d005      	beq.n	8006e60 <UART_SetConfig+0xa0>
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8007090 <UART_SetConfig+0x2d0>)
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d104      	bne.n	8006e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7ff fd62 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8006e64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e68:	e003      	b.n	8006e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7ff fd49 	bl	8006900 <HAL_RCC_GetPCLK1Freq>
 8006e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7c:	f040 810c 	bne.w	8007098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	1891      	adds	r1, r2, r2
 8006e98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e9a:	415b      	adcs	r3, r3
 8006e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	eb12 0801 	adds.w	r8, r2, r1
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	eb43 0901 	adc.w	r9, r3, r1
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ec2:	4690      	mov	r8, r2
 8006ec4:	4699      	mov	r9, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	eb18 0303 	adds.w	r3, r8, r3
 8006ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	eb49 0303 	adc.w	r3, r9, r3
 8006ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eee:	460b      	mov	r3, r1
 8006ef0:	18db      	adds	r3, r3, r3
 8006ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	eb42 0303 	adc.w	r3, r2, r3
 8006efa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f04:	f7f9 f9bc 	bl	8000280 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4b61      	ldr	r3, [pc, #388]	@ (8007094 <UART_SetConfig+0x2d4>)
 8006f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	011c      	lsls	r4, r3, #4
 8006f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f30:	415b      	adcs	r3, r3
 8006f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f38:	4641      	mov	r1, r8
 8006f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f3e:	4649      	mov	r1, r9
 8006f40:	eb43 0b01 	adc.w	fp, r3, r1
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f58:	4692      	mov	sl, r2
 8006f5a:	469b      	mov	fp, r3
 8006f5c:	4643      	mov	r3, r8
 8006f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f66:	464b      	mov	r3, r9
 8006f68:	eb4b 0303 	adc.w	r3, fp, r3
 8006f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f84:	460b      	mov	r3, r1
 8006f86:	18db      	adds	r3, r3, r3
 8006f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f9a:	f7f9 f971 	bl	8000280 <__aeabi_uldivmod>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8007094 <UART_SetConfig+0x2d4>)
 8006fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2264      	movs	r2, #100	@ 0x64
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	1acb      	subs	r3, r1, r3
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006fba:	4b36      	ldr	r3, [pc, #216]	@ (8007094 <UART_SetConfig+0x2d4>)
 8006fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fc8:	441c      	add	r4, r3
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fec:	4641      	mov	r1, r8
 8006fee:	1851      	adds	r1, r2, r1
 8006ff0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	414b      	adcs	r3, r1
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007004:	4659      	mov	r1, fp
 8007006:	00cb      	lsls	r3, r1, #3
 8007008:	4651      	mov	r1, sl
 800700a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700e:	4651      	mov	r1, sl
 8007010:	00ca      	lsls	r2, r1, #3
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	4603      	mov	r3, r0
 8007018:	4642      	mov	r2, r8
 800701a:	189b      	adds	r3, r3, r2
 800701c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007020:	464b      	mov	r3, r9
 8007022:	460a      	mov	r2, r1
 8007024:	eb42 0303 	adc.w	r3, r2, r3
 8007028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007038:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800703c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007040:	460b      	mov	r3, r1
 8007042:	18db      	adds	r3, r3, r3
 8007044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007046:	4613      	mov	r3, r2
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800704e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007056:	f7f9 f913 	bl	8000280 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <UART_SetConfig+0x2d4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	@ 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3332      	adds	r3, #50	@ 0x32
 8007072:	4a08      	ldr	r2, [pc, #32]	@ (8007094 <UART_SetConfig+0x2d4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0207 	and.w	r2, r3, #7
 800707e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4422      	add	r2, r4
 8007086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007088:	e106      	b.n	8007298 <UART_SetConfig+0x4d8>
 800708a:	bf00      	nop
 800708c:	40011000 	.word	0x40011000
 8007090:	40011400 	.word	0x40011400
 8007094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800709c:	2200      	movs	r2, #0
 800709e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070aa:	4642      	mov	r2, r8
 80070ac:	464b      	mov	r3, r9
 80070ae:	1891      	adds	r1, r2, r2
 80070b0:	6239      	str	r1, [r7, #32]
 80070b2:	415b      	adcs	r3, r3
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ba:	4641      	mov	r1, r8
 80070bc:	1854      	adds	r4, r2, r1
 80070be:	4649      	mov	r1, r9
 80070c0:	eb43 0501 	adc.w	r5, r3, r1
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	00eb      	lsls	r3, r5, #3
 80070ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d2:	00e2      	lsls	r2, r4, #3
 80070d4:	4614      	mov	r4, r2
 80070d6:	461d      	mov	r5, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	18e3      	adds	r3, r4, r3
 80070dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070e0:	464b      	mov	r3, r9
 80070e2:	eb45 0303 	adc.w	r3, r5, r3
 80070e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007106:	4629      	mov	r1, r5
 8007108:	008b      	lsls	r3, r1, #2
 800710a:	4621      	mov	r1, r4
 800710c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007110:	4621      	mov	r1, r4
 8007112:	008a      	lsls	r2, r1, #2
 8007114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007118:	f7f9 f8b2 	bl	8000280 <__aeabi_uldivmod>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4b60      	ldr	r3, [pc, #384]	@ (80072a4 <UART_SetConfig+0x4e4>)
 8007122:	fba3 2302 	umull	r2, r3, r3, r2
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	011c      	lsls	r4, r3, #4
 800712a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007134:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800713c:	4642      	mov	r2, r8
 800713e:	464b      	mov	r3, r9
 8007140:	1891      	adds	r1, r2, r2
 8007142:	61b9      	str	r1, [r7, #24]
 8007144:	415b      	adcs	r3, r3
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800714c:	4641      	mov	r1, r8
 800714e:	1851      	adds	r1, r2, r1
 8007150:	6139      	str	r1, [r7, #16]
 8007152:	4649      	mov	r1, r9
 8007154:	414b      	adcs	r3, r1
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007164:	4659      	mov	r1, fp
 8007166:	00cb      	lsls	r3, r1, #3
 8007168:	4651      	mov	r1, sl
 800716a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800716e:	4651      	mov	r1, sl
 8007170:	00ca      	lsls	r2, r1, #3
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	4603      	mov	r3, r0
 8007178:	4642      	mov	r2, r8
 800717a:	189b      	adds	r3, r3, r2
 800717c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007180:	464b      	mov	r3, r9
 8007182:	460a      	mov	r2, r1
 8007184:	eb42 0303 	adc.w	r3, r2, r3
 8007188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007196:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071a4:	4649      	mov	r1, r9
 80071a6:	008b      	lsls	r3, r1, #2
 80071a8:	4641      	mov	r1, r8
 80071aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ae:	4641      	mov	r1, r8
 80071b0:	008a      	lsls	r2, r1, #2
 80071b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071b6:	f7f9 f863 	bl	8000280 <__aeabi_uldivmod>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	4b38      	ldr	r3, [pc, #224]	@ (80072a4 <UART_SetConfig+0x4e4>)
 80071c2:	fba3 2301 	umull	r2, r3, r3, r1
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2264      	movs	r2, #100	@ 0x64
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	1acb      	subs	r3, r1, r3
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	3332      	adds	r3, #50	@ 0x32
 80071d4:	4a33      	ldr	r2, [pc, #204]	@ (80072a4 <UART_SetConfig+0x4e4>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071e0:	441c      	add	r4, r3
 80071e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e6:	2200      	movs	r2, #0
 80071e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80071ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	1891      	adds	r1, r2, r2
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	415b      	adcs	r3, r3
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007200:	4641      	mov	r1, r8
 8007202:	1851      	adds	r1, r2, r1
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	4649      	mov	r1, r9
 8007208:	414b      	adcs	r3, r1
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007218:	4659      	mov	r1, fp
 800721a:	00cb      	lsls	r3, r1, #3
 800721c:	4651      	mov	r1, sl
 800721e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007222:	4651      	mov	r1, sl
 8007224:	00ca      	lsls	r2, r1, #3
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	4603      	mov	r3, r0
 800722c:	4642      	mov	r2, r8
 800722e:	189b      	adds	r3, r3, r2
 8007230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007232:	464b      	mov	r3, r9
 8007234:	460a      	mov	r2, r1
 8007236:	eb42 0303 	adc.w	r3, r2, r3
 800723a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	663b      	str	r3, [r7, #96]	@ 0x60
 8007246:	667a      	str	r2, [r7, #100]	@ 0x64
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007254:	4649      	mov	r1, r9
 8007256:	008b      	lsls	r3, r1, #2
 8007258:	4641      	mov	r1, r8
 800725a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800725e:	4641      	mov	r1, r8
 8007260:	008a      	lsls	r2, r1, #2
 8007262:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007266:	f7f9 f80b 	bl	8000280 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <UART_SetConfig+0x4e4>)
 8007270:	fba3 1302 	umull	r1, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	2164      	movs	r1, #100	@ 0x64
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	3332      	adds	r3, #50	@ 0x32
 8007282:	4a08      	ldr	r2, [pc, #32]	@ (80072a4 <UART_SetConfig+0x4e4>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4422      	add	r2, r4
 8007296:	609a      	str	r2, [r3, #8]
}
 8007298:	bf00      	nop
 800729a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800729e:	46bd      	mov	sp, r7
 80072a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a4:	51eb851f 	.word	0x51eb851f

080072a8 <std>:
 80072a8:	2300      	movs	r3, #0
 80072aa:	b510      	push	{r4, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	e9c0 3300 	strd	r3, r3, [r0]
 80072b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072b6:	6083      	str	r3, [r0, #8]
 80072b8:	8181      	strh	r1, [r0, #12]
 80072ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80072bc:	81c2      	strh	r2, [r0, #14]
 80072be:	6183      	str	r3, [r0, #24]
 80072c0:	4619      	mov	r1, r3
 80072c2:	2208      	movs	r2, #8
 80072c4:	305c      	adds	r0, #92	@ 0x5c
 80072c6:	f000 fa01 	bl	80076cc <memset>
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <std+0x58>)
 80072cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80072ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <std+0x5c>)
 80072d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <std+0x60>)
 80072d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072d6:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <std+0x64>)
 80072d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80072da:	4b0d      	ldr	r3, [pc, #52]	@ (8007310 <std+0x68>)
 80072dc:	6224      	str	r4, [r4, #32]
 80072de:	429c      	cmp	r4, r3
 80072e0:	d006      	beq.n	80072f0 <std+0x48>
 80072e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072e6:	4294      	cmp	r4, r2
 80072e8:	d002      	beq.n	80072f0 <std+0x48>
 80072ea:	33d0      	adds	r3, #208	@ 0xd0
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d105      	bne.n	80072fc <std+0x54>
 80072f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f8:	f000 ba60 	b.w	80077bc <__retarget_lock_init_recursive>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	bf00      	nop
 8007300:	0800751d 	.word	0x0800751d
 8007304:	0800753f 	.word	0x0800753f
 8007308:	08007577 	.word	0x08007577
 800730c:	0800759b 	.word	0x0800759b
 8007310:	200019e4 	.word	0x200019e4

08007314 <stdio_exit_handler>:
 8007314:	4a02      	ldr	r2, [pc, #8]	@ (8007320 <stdio_exit_handler+0xc>)
 8007316:	4903      	ldr	r1, [pc, #12]	@ (8007324 <stdio_exit_handler+0x10>)
 8007318:	4803      	ldr	r0, [pc, #12]	@ (8007328 <stdio_exit_handler+0x14>)
 800731a:	f000 b869 	b.w	80073f0 <_fwalk_sglue>
 800731e:	bf00      	nop
 8007320:	20000048 	.word	0x20000048
 8007324:	08008079 	.word	0x08008079
 8007328:	20000058 	.word	0x20000058

0800732c <cleanup_stdio>:
 800732c:	6841      	ldr	r1, [r0, #4]
 800732e:	4b0c      	ldr	r3, [pc, #48]	@ (8007360 <cleanup_stdio+0x34>)
 8007330:	4299      	cmp	r1, r3
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	d001      	beq.n	800733c <cleanup_stdio+0x10>
 8007338:	f000 fe9e 	bl	8008078 <_fflush_r>
 800733c:	68a1      	ldr	r1, [r4, #8]
 800733e:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <cleanup_stdio+0x38>)
 8007340:	4299      	cmp	r1, r3
 8007342:	d002      	beq.n	800734a <cleanup_stdio+0x1e>
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fe97 	bl	8008078 <_fflush_r>
 800734a:	68e1      	ldr	r1, [r4, #12]
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <cleanup_stdio+0x3c>)
 800734e:	4299      	cmp	r1, r3
 8007350:	d004      	beq.n	800735c <cleanup_stdio+0x30>
 8007352:	4620      	mov	r0, r4
 8007354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007358:	f000 be8e 	b.w	8008078 <_fflush_r>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	bf00      	nop
 8007360:	200019e4 	.word	0x200019e4
 8007364:	20001a4c 	.word	0x20001a4c
 8007368:	20001ab4 	.word	0x20001ab4

0800736c <global_stdio_init.part.0>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <global_stdio_init.part.0+0x30>)
 8007370:	4c0b      	ldr	r4, [pc, #44]	@ (80073a0 <global_stdio_init.part.0+0x34>)
 8007372:	4a0c      	ldr	r2, [pc, #48]	@ (80073a4 <global_stdio_init.part.0+0x38>)
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	4620      	mov	r0, r4
 8007378:	2200      	movs	r2, #0
 800737a:	2104      	movs	r1, #4
 800737c:	f7ff ff94 	bl	80072a8 <std>
 8007380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007384:	2201      	movs	r2, #1
 8007386:	2109      	movs	r1, #9
 8007388:	f7ff ff8e 	bl	80072a8 <std>
 800738c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007390:	2202      	movs	r2, #2
 8007392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007396:	2112      	movs	r1, #18
 8007398:	f7ff bf86 	b.w	80072a8 <std>
 800739c:	20001b1c 	.word	0x20001b1c
 80073a0:	200019e4 	.word	0x200019e4
 80073a4:	08007315 	.word	0x08007315

080073a8 <__sfp_lock_acquire>:
 80073a8:	4801      	ldr	r0, [pc, #4]	@ (80073b0 <__sfp_lock_acquire+0x8>)
 80073aa:	f000 ba08 	b.w	80077be <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	20001b25 	.word	0x20001b25

080073b4 <__sfp_lock_release>:
 80073b4:	4801      	ldr	r0, [pc, #4]	@ (80073bc <__sfp_lock_release+0x8>)
 80073b6:	f000 ba03 	b.w	80077c0 <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	20001b25 	.word	0x20001b25

080073c0 <__sinit>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4604      	mov	r4, r0
 80073c4:	f7ff fff0 	bl	80073a8 <__sfp_lock_acquire>
 80073c8:	6a23      	ldr	r3, [r4, #32]
 80073ca:	b11b      	cbz	r3, 80073d4 <__sinit+0x14>
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d0:	f7ff bff0 	b.w	80073b4 <__sfp_lock_release>
 80073d4:	4b04      	ldr	r3, [pc, #16]	@ (80073e8 <__sinit+0x28>)
 80073d6:	6223      	str	r3, [r4, #32]
 80073d8:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <__sinit+0x2c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f5      	bne.n	80073cc <__sinit+0xc>
 80073e0:	f7ff ffc4 	bl	800736c <global_stdio_init.part.0>
 80073e4:	e7f2      	b.n	80073cc <__sinit+0xc>
 80073e6:	bf00      	nop
 80073e8:	0800732d 	.word	0x0800732d
 80073ec:	20001b1c 	.word	0x20001b1c

080073f0 <_fwalk_sglue>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4607      	mov	r7, r0
 80073f6:	4688      	mov	r8, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	2600      	movs	r6, #0
 80073fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007400:	f1b9 0901 	subs.w	r9, r9, #1
 8007404:	d505      	bpl.n	8007412 <_fwalk_sglue+0x22>
 8007406:	6824      	ldr	r4, [r4, #0]
 8007408:	2c00      	cmp	r4, #0
 800740a:	d1f7      	bne.n	80073fc <_fwalk_sglue+0xc>
 800740c:	4630      	mov	r0, r6
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d907      	bls.n	8007428 <_fwalk_sglue+0x38>
 8007418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800741c:	3301      	adds	r3, #1
 800741e:	d003      	beq.n	8007428 <_fwalk_sglue+0x38>
 8007420:	4629      	mov	r1, r5
 8007422:	4638      	mov	r0, r7
 8007424:	47c0      	blx	r8
 8007426:	4306      	orrs	r6, r0
 8007428:	3568      	adds	r5, #104	@ 0x68
 800742a:	e7e9      	b.n	8007400 <_fwalk_sglue+0x10>

0800742c <iprintf>:
 800742c:	b40f      	push	{r0, r1, r2, r3}
 800742e:	b507      	push	{r0, r1, r2, lr}
 8007430:	4906      	ldr	r1, [pc, #24]	@ (800744c <iprintf+0x20>)
 8007432:	ab04      	add	r3, sp, #16
 8007434:	6808      	ldr	r0, [r1, #0]
 8007436:	f853 2b04 	ldr.w	r2, [r3], #4
 800743a:	6881      	ldr	r1, [r0, #8]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	f000 faf1 	bl	8007a24 <_vfiprintf_r>
 8007442:	b003      	add	sp, #12
 8007444:	f85d eb04 	ldr.w	lr, [sp], #4
 8007448:	b004      	add	sp, #16
 800744a:	4770      	bx	lr
 800744c:	20000054 	.word	0x20000054

08007450 <putchar>:
 8007450:	4b02      	ldr	r3, [pc, #8]	@ (800745c <putchar+0xc>)
 8007452:	4601      	mov	r1, r0
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	6882      	ldr	r2, [r0, #8]
 8007458:	f000 be98 	b.w	800818c <_putc_r>
 800745c:	20000054 	.word	0x20000054

08007460 <_puts_r>:
 8007460:	6a03      	ldr	r3, [r0, #32]
 8007462:	b570      	push	{r4, r5, r6, lr}
 8007464:	6884      	ldr	r4, [r0, #8]
 8007466:	4605      	mov	r5, r0
 8007468:	460e      	mov	r6, r1
 800746a:	b90b      	cbnz	r3, 8007470 <_puts_r+0x10>
 800746c:	f7ff ffa8 	bl	80073c0 <__sinit>
 8007470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d405      	bmi.n	8007482 <_puts_r+0x22>
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	0598      	lsls	r0, r3, #22
 800747a:	d402      	bmi.n	8007482 <_puts_r+0x22>
 800747c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747e:	f000 f99e 	bl	80077be <__retarget_lock_acquire_recursive>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	d502      	bpl.n	800748e <_puts_r+0x2e>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d135      	bne.n	80074fa <_puts_r+0x9a>
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f8c5 	bl	8007620 <__swsetup_r>
 8007496:	b380      	cbz	r0, 80074fa <_puts_r+0x9a>
 8007498:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800749c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800749e:	07da      	lsls	r2, r3, #31
 80074a0:	d405      	bmi.n	80074ae <_puts_r+0x4e>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	059b      	lsls	r3, r3, #22
 80074a6:	d402      	bmi.n	80074ae <_puts_r+0x4e>
 80074a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074aa:	f000 f989 	bl	80077c0 <__retarget_lock_release_recursive>
 80074ae:	4628      	mov	r0, r5
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da04      	bge.n	80074c0 <_puts_r+0x60>
 80074b6:	69a2      	ldr	r2, [r4, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	dc17      	bgt.n	80074ec <_puts_r+0x8c>
 80074bc:	290a      	cmp	r1, #10
 80074be:	d015      	beq.n	80074ec <_puts_r+0x8c>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	6022      	str	r2, [r4, #0]
 80074c6:	7019      	strb	r1, [r3, #0]
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ce:	3b01      	subs	r3, #1
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	2900      	cmp	r1, #0
 80074d4:	d1ed      	bne.n	80074b2 <_puts_r+0x52>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da11      	bge.n	80074fe <_puts_r+0x9e>
 80074da:	4622      	mov	r2, r4
 80074dc:	210a      	movs	r1, #10
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f85f 	bl	80075a2 <__swbuf_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d0d7      	beq.n	8007498 <_puts_r+0x38>
 80074e8:	250a      	movs	r5, #10
 80074ea:	e7d7      	b.n	800749c <_puts_r+0x3c>
 80074ec:	4622      	mov	r2, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 f857 	bl	80075a2 <__swbuf_r>
 80074f4:	3001      	adds	r0, #1
 80074f6:	d1e7      	bne.n	80074c8 <_puts_r+0x68>
 80074f8:	e7ce      	b.n	8007498 <_puts_r+0x38>
 80074fa:	3e01      	subs	r6, #1
 80074fc:	e7e4      	b.n	80074c8 <_puts_r+0x68>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	220a      	movs	r2, #10
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e7ee      	b.n	80074e8 <_puts_r+0x88>
	...

0800750c <puts>:
 800750c:	4b02      	ldr	r3, [pc, #8]	@ (8007518 <puts+0xc>)
 800750e:	4601      	mov	r1, r0
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f7ff bfa5 	b.w	8007460 <_puts_r>
 8007516:	bf00      	nop
 8007518:	20000054 	.word	0x20000054

0800751c <__sread>:
 800751c:	b510      	push	{r4, lr}
 800751e:	460c      	mov	r4, r1
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	f000 f8fc 	bl	8007720 <_read_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	bfab      	itete	ge
 800752c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800752e:	89a3      	ldrhlt	r3, [r4, #12]
 8007530:	181b      	addge	r3, r3, r0
 8007532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007536:	bfac      	ite	ge
 8007538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800753a:	81a3      	strhlt	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__swrite>:
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	461f      	mov	r7, r3
 8007544:	898b      	ldrh	r3, [r1, #12]
 8007546:	05db      	lsls	r3, r3, #23
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4616      	mov	r6, r2
 800754e:	d505      	bpl.n	800755c <__swrite+0x1e>
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2302      	movs	r3, #2
 8007556:	2200      	movs	r2, #0
 8007558:	f000 f8d0 	bl	80076fc <_lseek_r>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f000 b8e7 	b.w	8007744 <_write_r>

08007576 <__sseek>:
 8007576:	b510      	push	{r4, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 f8bd 	bl	80076fc <_lseek_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	bf15      	itete	ne
 8007588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800758a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800758e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007592:	81a3      	strheq	r3, [r4, #12]
 8007594:	bf18      	it	ne
 8007596:	81a3      	strhne	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__sclose>:
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 b89d 	b.w	80076dc <_close_r>

080075a2 <__swbuf_r>:
 80075a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a4:	460e      	mov	r6, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	4605      	mov	r5, r0
 80075aa:	b118      	cbz	r0, 80075b4 <__swbuf_r+0x12>
 80075ac:	6a03      	ldr	r3, [r0, #32]
 80075ae:	b90b      	cbnz	r3, 80075b4 <__swbuf_r+0x12>
 80075b0:	f7ff ff06 	bl	80073c0 <__sinit>
 80075b4:	69a3      	ldr	r3, [r4, #24]
 80075b6:	60a3      	str	r3, [r4, #8]
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	071a      	lsls	r2, r3, #28
 80075bc:	d501      	bpl.n	80075c2 <__swbuf_r+0x20>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	b943      	cbnz	r3, 80075d4 <__swbuf_r+0x32>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 f82b 	bl	8007620 <__swsetup_r>
 80075ca:	b118      	cbz	r0, 80075d4 <__swbuf_r+0x32>
 80075cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80075d0:	4638      	mov	r0, r7
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	6922      	ldr	r2, [r4, #16]
 80075d8:	1a98      	subs	r0, r3, r2
 80075da:	6963      	ldr	r3, [r4, #20]
 80075dc:	b2f6      	uxtb	r6, r6
 80075de:	4283      	cmp	r3, r0
 80075e0:	4637      	mov	r7, r6
 80075e2:	dc05      	bgt.n	80075f0 <__swbuf_r+0x4e>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 fd46 	bl	8008078 <_fflush_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1ed      	bne.n	80075cc <__swbuf_r+0x2a>
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	701e      	strb	r6, [r3, #0]
 80075fe:	6962      	ldr	r2, [r4, #20]
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	429a      	cmp	r2, r3
 8007604:	d004      	beq.n	8007610 <__swbuf_r+0x6e>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	07db      	lsls	r3, r3, #31
 800760a:	d5e1      	bpl.n	80075d0 <__swbuf_r+0x2e>
 800760c:	2e0a      	cmp	r6, #10
 800760e:	d1df      	bne.n	80075d0 <__swbuf_r+0x2e>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 fd30 	bl	8008078 <_fflush_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0d9      	beq.n	80075d0 <__swbuf_r+0x2e>
 800761c:	e7d6      	b.n	80075cc <__swbuf_r+0x2a>
	...

08007620 <__swsetup_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4b29      	ldr	r3, [pc, #164]	@ (80076c8 <__swsetup_r+0xa8>)
 8007624:	4605      	mov	r5, r0
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	460c      	mov	r4, r1
 800762a:	b118      	cbz	r0, 8007634 <__swsetup_r+0x14>
 800762c:	6a03      	ldr	r3, [r0, #32]
 800762e:	b90b      	cbnz	r3, 8007634 <__swsetup_r+0x14>
 8007630:	f7ff fec6 	bl	80073c0 <__sinit>
 8007634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007638:	0719      	lsls	r1, r3, #28
 800763a:	d422      	bmi.n	8007682 <__swsetup_r+0x62>
 800763c:	06da      	lsls	r2, r3, #27
 800763e:	d407      	bmi.n	8007650 <__swsetup_r+0x30>
 8007640:	2209      	movs	r2, #9
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800764e:	e033      	b.n	80076b8 <__swsetup_r+0x98>
 8007650:	0758      	lsls	r0, r3, #29
 8007652:	d512      	bpl.n	800767a <__swsetup_r+0x5a>
 8007654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007656:	b141      	cbz	r1, 800766a <__swsetup_r+0x4a>
 8007658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <__swsetup_r+0x46>
 8007660:	4628      	mov	r0, r5
 8007662:	f000 f8bd 	bl	80077e0 <_free_r>
 8007666:	2300      	movs	r3, #0
 8007668:	6363      	str	r3, [r4, #52]	@ 0x34
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	2300      	movs	r3, #0
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0308 	orr.w	r3, r3, #8
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	b94b      	cbnz	r3, 800769a <__swsetup_r+0x7a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800768c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007690:	d003      	beq.n	800769a <__swsetup_r+0x7a>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 fd3d 	bl	8008114 <__smakebuf_r>
 800769a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769e:	f013 0201 	ands.w	r2, r3, #1
 80076a2:	d00a      	beq.n	80076ba <__swsetup_r+0x9a>
 80076a4:	2200      	movs	r2, #0
 80076a6:	60a2      	str	r2, [r4, #8]
 80076a8:	6962      	ldr	r2, [r4, #20]
 80076aa:	4252      	negs	r2, r2
 80076ac:	61a2      	str	r2, [r4, #24]
 80076ae:	6922      	ldr	r2, [r4, #16]
 80076b0:	b942      	cbnz	r2, 80076c4 <__swsetup_r+0xa4>
 80076b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076b6:	d1c5      	bne.n	8007644 <__swsetup_r+0x24>
 80076b8:	bd38      	pop	{r3, r4, r5, pc}
 80076ba:	0799      	lsls	r1, r3, #30
 80076bc:	bf58      	it	pl
 80076be:	6962      	ldrpl	r2, [r4, #20]
 80076c0:	60a2      	str	r2, [r4, #8]
 80076c2:	e7f4      	b.n	80076ae <__swsetup_r+0x8e>
 80076c4:	2000      	movs	r0, #0
 80076c6:	e7f7      	b.n	80076b8 <__swsetup_r+0x98>
 80076c8:	20000054 	.word	0x20000054

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <_close_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d06      	ldr	r5, [pc, #24]	@ (80076f8 <_close_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7f9 feeb 	bl	80014c2 <_close>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_close_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_close_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20001b20 	.word	0x20001b20

080076fc <_lseek_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d07      	ldr	r5, [pc, #28]	@ (800771c <_lseek_r+0x20>)
 8007700:	4604      	mov	r4, r0
 8007702:	4608      	mov	r0, r1
 8007704:	4611      	mov	r1, r2
 8007706:	2200      	movs	r2, #0
 8007708:	602a      	str	r2, [r5, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f7f9 ff00 	bl	8001510 <_lseek>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_lseek_r+0x1e>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_lseek_r+0x1e>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20001b20 	.word	0x20001b20

08007720 <_read_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d07      	ldr	r5, [pc, #28]	@ (8007740 <_read_r+0x20>)
 8007724:	4604      	mov	r4, r0
 8007726:	4608      	mov	r0, r1
 8007728:	4611      	mov	r1, r2
 800772a:	2200      	movs	r2, #0
 800772c:	602a      	str	r2, [r5, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	f7f9 fe8e 	bl	8001450 <_read>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d102      	bne.n	800773e <_read_r+0x1e>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	b103      	cbz	r3, 800773e <_read_r+0x1e>
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	20001b20 	.word	0x20001b20

08007744 <_write_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	@ (8007764 <_write_r+0x20>)
 8007748:	4604      	mov	r4, r0
 800774a:	4608      	mov	r0, r1
 800774c:	4611      	mov	r1, r2
 800774e:	2200      	movs	r2, #0
 8007750:	602a      	str	r2, [r5, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	f7f9 fe99 	bl	800148a <_write>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_write_r+0x1e>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_write_r+0x1e>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	20001b20 	.word	0x20001b20

08007768 <__errno>:
 8007768:	4b01      	ldr	r3, [pc, #4]	@ (8007770 <__errno+0x8>)
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000054 	.word	0x20000054

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	@ (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	@ (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	@ (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	@ (80077b8 <__libc_init_array+0x44>)
 8007788:	f000 fd66 	bl	8008258 <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	0801db84 	.word	0x0801db84
 80077b0:	0801db84 	.word	0x0801db84
 80077b4:	0801db84 	.word	0x0801db84
 80077b8:	0801db88 	.word	0x0801db88

080077bc <__retarget_lock_init_recursive>:
 80077bc:	4770      	bx	lr

080077be <__retarget_lock_acquire_recursive>:
 80077be:	4770      	bx	lr

080077c0 <__retarget_lock_release_recursive>:
 80077c0:	4770      	bx	lr

080077c2 <memcpy>:
 80077c2:	440a      	add	r2, r1
 80077c4:	4291      	cmp	r1, r2
 80077c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80077ca:	d100      	bne.n	80077ce <memcpy+0xc>
 80077cc:	4770      	bx	lr
 80077ce:	b510      	push	{r4, lr}
 80077d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d8:	4291      	cmp	r1, r2
 80077da:	d1f9      	bne.n	80077d0 <memcpy+0xe>
 80077dc:	bd10      	pop	{r4, pc}
	...

080077e0 <_free_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4605      	mov	r5, r0
 80077e4:	2900      	cmp	r1, #0
 80077e6:	d041      	beq.n	800786c <_free_r+0x8c>
 80077e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ec:	1f0c      	subs	r4, r1, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	18e4      	addlt	r4, r4, r3
 80077f4:	f000 f8e0 	bl	80079b8 <__malloc_lock>
 80077f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007870 <_free_r+0x90>)
 80077fa:	6813      	ldr	r3, [r2, #0]
 80077fc:	b933      	cbnz	r3, 800780c <_free_r+0x2c>
 80077fe:	6063      	str	r3, [r4, #4]
 8007800:	6014      	str	r4, [r2, #0]
 8007802:	4628      	mov	r0, r5
 8007804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007808:	f000 b8dc 	b.w	80079c4 <__malloc_unlock>
 800780c:	42a3      	cmp	r3, r4
 800780e:	d908      	bls.n	8007822 <_free_r+0x42>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	1821      	adds	r1, r4, r0
 8007814:	428b      	cmp	r3, r1
 8007816:	bf01      	itttt	eq
 8007818:	6819      	ldreq	r1, [r3, #0]
 800781a:	685b      	ldreq	r3, [r3, #4]
 800781c:	1809      	addeq	r1, r1, r0
 800781e:	6021      	streq	r1, [r4, #0]
 8007820:	e7ed      	b.n	80077fe <_free_r+0x1e>
 8007822:	461a      	mov	r2, r3
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b10b      	cbz	r3, 800782c <_free_r+0x4c>
 8007828:	42a3      	cmp	r3, r4
 800782a:	d9fa      	bls.n	8007822 <_free_r+0x42>
 800782c:	6811      	ldr	r1, [r2, #0]
 800782e:	1850      	adds	r0, r2, r1
 8007830:	42a0      	cmp	r0, r4
 8007832:	d10b      	bne.n	800784c <_free_r+0x6c>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	4401      	add	r1, r0
 8007838:	1850      	adds	r0, r2, r1
 800783a:	4283      	cmp	r3, r0
 800783c:	6011      	str	r1, [r2, #0]
 800783e:	d1e0      	bne.n	8007802 <_free_r+0x22>
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	6053      	str	r3, [r2, #4]
 8007846:	4408      	add	r0, r1
 8007848:	6010      	str	r0, [r2, #0]
 800784a:	e7da      	b.n	8007802 <_free_r+0x22>
 800784c:	d902      	bls.n	8007854 <_free_r+0x74>
 800784e:	230c      	movs	r3, #12
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	e7d6      	b.n	8007802 <_free_r+0x22>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	1821      	adds	r1, r4, r0
 8007858:	428b      	cmp	r3, r1
 800785a:	bf04      	itt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	6063      	str	r3, [r4, #4]
 8007862:	bf04      	itt	eq
 8007864:	1809      	addeq	r1, r1, r0
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	6054      	str	r4, [r2, #4]
 800786a:	e7ca      	b.n	8007802 <_free_r+0x22>
 800786c:	bd38      	pop	{r3, r4, r5, pc}
 800786e:	bf00      	nop
 8007870:	20001b2c 	.word	0x20001b2c

08007874 <sbrk_aligned>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	4e0f      	ldr	r6, [pc, #60]	@ (80078b4 <sbrk_aligned+0x40>)
 8007878:	460c      	mov	r4, r1
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	4605      	mov	r5, r0
 800787e:	b911      	cbnz	r1, 8007886 <sbrk_aligned+0x12>
 8007880:	f000 fcda 	bl	8008238 <_sbrk_r>
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fcd5 	bl	8008238 <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d103      	bne.n	800789a <sbrk_aligned+0x26>
 8007892:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007896:	4620      	mov	r0, r4
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0f8      	beq.n	8007896 <sbrk_aligned+0x22>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fcc6 	bl	8008238 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1f2      	bne.n	8007896 <sbrk_aligned+0x22>
 80078b0:	e7ef      	b.n	8007892 <sbrk_aligned+0x1e>
 80078b2:	bf00      	nop
 80078b4:	20001b28 	.word	0x20001b28

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d904      	bls.n	80078de <_malloc_r+0x26>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b4 <_malloc_r+0xfc>
 80078e2:	f000 f869 	bl	80079b8 <__malloc_lock>
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	461c      	mov	r4, r3
 80078ec:	bb44      	cbnz	r4, 8007940 <_malloc_r+0x88>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbf 	bl	8007874 <sbrk_aligned>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	d158      	bne.n	80079ae <_malloc_r+0xf6>
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	4627      	mov	r7, r4
 8007902:	2f00      	cmp	r7, #0
 8007904:	d143      	bne.n	800798e <_malloc_r+0xd6>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d04b      	beq.n	80079a2 <_malloc_r+0xea>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	eb04 0903 	add.w	r9, r4, r3
 8007914:	f000 fc90 	bl	8008238 <_sbrk_r>
 8007918:	4581      	cmp	r9, r0
 800791a:	d142      	bne.n	80079a2 <_malloc_r+0xea>
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	1a6d      	subs	r5, r5, r1
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffa6 	bl	8007874 <sbrk_aligned>
 8007928:	3001      	adds	r0, #1
 800792a:	d03a      	beq.n	80079a2 <_malloc_r+0xea>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	442b      	add	r3, r5
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	bb62      	cbnz	r2, 8007994 <_malloc_r+0xdc>
 800793a:	f8c8 7000 	str.w	r7, [r8]
 800793e:	e00f      	b.n	8007960 <_malloc_r+0xa8>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1b52      	subs	r2, r2, r5
 8007944:	d420      	bmi.n	8007988 <_malloc_r+0xd0>
 8007946:	2a0b      	cmp	r2, #11
 8007948:	d917      	bls.n	800797a <_malloc_r+0xc2>
 800794a:	1961      	adds	r1, r4, r5
 800794c:	42a3      	cmp	r3, r4
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	6059      	strne	r1, [r3, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	bf08      	it	eq
 8007958:	f8c8 1000 	streq.w	r1, [r8]
 800795c:	5162      	str	r2, [r4, r5]
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f82f 	bl	80079c4 <__malloc_unlock>
 8007966:	f104 000b 	add.w	r0, r4, #11
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	f020 0007 	bic.w	r0, r0, #7
 8007970:	1ac2      	subs	r2, r0, r3
 8007972:	bf1c      	itt	ne
 8007974:	1a1b      	subne	r3, r3, r0
 8007976:	50a3      	strne	r3, [r4, r2]
 8007978:	e7af      	b.n	80078da <_malloc_r+0x22>
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	42a3      	cmp	r3, r4
 800797e:	bf0c      	ite	eq
 8007980:	f8c8 2000 	streq.w	r2, [r8]
 8007984:	605a      	strne	r2, [r3, #4]
 8007986:	e7eb      	b.n	8007960 <_malloc_r+0xa8>
 8007988:	4623      	mov	r3, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7ae      	b.n	80078ec <_malloc_r+0x34>
 800798e:	463c      	mov	r4, r7
 8007990:	687f      	ldr	r7, [r7, #4]
 8007992:	e7b6      	b.n	8007902 <_malloc_r+0x4a>
 8007994:	461a      	mov	r2, r3
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	d1fb      	bne.n	8007994 <_malloc_r+0xdc>
 800799c:	2300      	movs	r3, #0
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7de      	b.n	8007960 <_malloc_r+0xa8>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f80c 	bl	80079c4 <__malloc_unlock>
 80079ac:	e794      	b.n	80078d8 <_malloc_r+0x20>
 80079ae:	6005      	str	r5, [r0, #0]
 80079b0:	e7d6      	b.n	8007960 <_malloc_r+0xa8>
 80079b2:	bf00      	nop
 80079b4:	20001b2c 	.word	0x20001b2c

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff bf00 	b.w	80077be <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20001b24 	.word	0x20001b24

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff befb 	b.w	80077c0 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20001b24 	.word	0x20001b24

080079d0 <__sfputc_r>:
 80079d0:	6893      	ldr	r3, [r2, #8]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	b410      	push	{r4}
 80079d8:	6093      	str	r3, [r2, #8]
 80079da:	da08      	bge.n	80079ee <__sfputc_r+0x1e>
 80079dc:	6994      	ldr	r4, [r2, #24]
 80079de:	42a3      	cmp	r3, r4
 80079e0:	db01      	blt.n	80079e6 <__sfputc_r+0x16>
 80079e2:	290a      	cmp	r1, #10
 80079e4:	d103      	bne.n	80079ee <__sfputc_r+0x1e>
 80079e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ea:	f7ff bdda 	b.w	80075a2 <__swbuf_r>
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	1c58      	adds	r0, r3, #1
 80079f2:	6010      	str	r0, [r2, #0]
 80079f4:	7019      	strb	r1, [r3, #0]
 80079f6:	4608      	mov	r0, r1
 80079f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <__sfputs_r>:
 80079fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	18d5      	adds	r5, r2, r3
 8007a08:	42ac      	cmp	r4, r5
 8007a0a:	d101      	bne.n	8007a10 <__sfputs_r+0x12>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e007      	b.n	8007a20 <__sfputs_r+0x22>
 8007a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a14:	463a      	mov	r2, r7
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ffda 	bl	80079d0 <__sfputc_r>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d1f3      	bne.n	8007a08 <__sfputs_r+0xa>
 8007a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a24 <_vfiprintf_r>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	460d      	mov	r5, r1
 8007a2a:	b09d      	sub	sp, #116	@ 0x74
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	4698      	mov	r8, r3
 8007a30:	4606      	mov	r6, r0
 8007a32:	b118      	cbz	r0, 8007a3c <_vfiprintf_r+0x18>
 8007a34:	6a03      	ldr	r3, [r0, #32]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x18>
 8007a38:	f7ff fcc2 	bl	80073c0 <__sinit>
 8007a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	d405      	bmi.n	8007a4e <_vfiprintf_r+0x2a>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	059a      	lsls	r2, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_vfiprintf_r+0x2a>
 8007a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a4a:	f7ff feb8 	bl	80077be <__retarget_lock_acquire_recursive>
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	071b      	lsls	r3, r3, #28
 8007a52:	d501      	bpl.n	8007a58 <_vfiprintf_r+0x34>
 8007a54:	692b      	ldr	r3, [r5, #16]
 8007a56:	b99b      	cbnz	r3, 8007a80 <_vfiprintf_r+0x5c>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff fde0 	bl	8007620 <__swsetup_r>
 8007a60:	b170      	cbz	r0, 8007a80 <_vfiprintf_r+0x5c>
 8007a62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a64:	07dc      	lsls	r4, r3, #31
 8007a66:	d504      	bpl.n	8007a72 <_vfiprintf_r+0x4e>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a6c:	b01d      	add	sp, #116	@ 0x74
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	0598      	lsls	r0, r3, #22
 8007a76:	d4f7      	bmi.n	8007a68 <_vfiprintf_r+0x44>
 8007a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a7a:	f7ff fea1 	bl	80077c0 <__retarget_lock_release_recursive>
 8007a7e:	e7f3      	b.n	8007a68 <_vfiprintf_r+0x44>
 8007a80:	2300      	movs	r3, #0
 8007a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a84:	2320      	movs	r3, #32
 8007a86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a8e:	2330      	movs	r3, #48	@ 0x30
 8007a90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c40 <_vfiprintf_r+0x21c>
 8007a94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a98:	f04f 0901 	mov.w	r9, #1
 8007a9c:	4623      	mov	r3, r4
 8007a9e:	469a      	mov	sl, r3
 8007aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa4:	b10a      	cbz	r2, 8007aaa <_vfiprintf_r+0x86>
 8007aa6:	2a25      	cmp	r2, #37	@ 0x25
 8007aa8:	d1f9      	bne.n	8007a9e <_vfiprintf_r+0x7a>
 8007aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8007aae:	d00b      	beq.n	8007ac8 <_vfiprintf_r+0xa4>
 8007ab0:	465b      	mov	r3, fp
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ffa1 	bl	80079fe <__sfputs_r>
 8007abc:	3001      	adds	r0, #1
 8007abe:	f000 80a7 	beq.w	8007c10 <_vfiprintf_r+0x1ec>
 8007ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ac4:	445a      	add	r2, fp
 8007ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 809f 	beq.w	8007c10 <_vfiprintf_r+0x1ec>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007adc:	f10a 0a01 	add.w	sl, sl, #1
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	9307      	str	r3, [sp, #28]
 8007ae4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ae8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aea:	4654      	mov	r4, sl
 8007aec:	2205      	movs	r2, #5
 8007aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af2:	4853      	ldr	r0, [pc, #332]	@ (8007c40 <_vfiprintf_r+0x21c>)
 8007af4:	f7f8 fb74 	bl	80001e0 <memchr>
 8007af8:	9a04      	ldr	r2, [sp, #16]
 8007afa:	b9d8      	cbnz	r0, 8007b34 <_vfiprintf_r+0x110>
 8007afc:	06d1      	lsls	r1, r2, #27
 8007afe:	bf44      	itt	mi
 8007b00:	2320      	movmi	r3, #32
 8007b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b06:	0713      	lsls	r3, r2, #28
 8007b08:	bf44      	itt	mi
 8007b0a:	232b      	movmi	r3, #43	@ 0x2b
 8007b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b10:	f89a 3000 	ldrb.w	r3, [sl]
 8007b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b16:	d015      	beq.n	8007b44 <_vfiprintf_r+0x120>
 8007b18:	9a07      	ldr	r2, [sp, #28]
 8007b1a:	4654      	mov	r4, sl
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f04f 0c0a 	mov.w	ip, #10
 8007b22:	4621      	mov	r1, r4
 8007b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b28:	3b30      	subs	r3, #48	@ 0x30
 8007b2a:	2b09      	cmp	r3, #9
 8007b2c:	d94b      	bls.n	8007bc6 <_vfiprintf_r+0x1a2>
 8007b2e:	b1b0      	cbz	r0, 8007b5e <_vfiprintf_r+0x13a>
 8007b30:	9207      	str	r2, [sp, #28]
 8007b32:	e014      	b.n	8007b5e <_vfiprintf_r+0x13a>
 8007b34:	eba0 0308 	sub.w	r3, r0, r8
 8007b38:	fa09 f303 	lsl.w	r3, r9, r3
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	46a2      	mov	sl, r4
 8007b42:	e7d2      	b.n	8007aea <_vfiprintf_r+0xc6>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	1d19      	adds	r1, r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	9103      	str	r1, [sp, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bfbb      	ittet	lt
 8007b50:	425b      	neglt	r3, r3
 8007b52:	f042 0202 	orrlt.w	r2, r2, #2
 8007b56:	9307      	strge	r3, [sp, #28]
 8007b58:	9307      	strlt	r3, [sp, #28]
 8007b5a:	bfb8      	it	lt
 8007b5c:	9204      	strlt	r2, [sp, #16]
 8007b5e:	7823      	ldrb	r3, [r4, #0]
 8007b60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b62:	d10a      	bne.n	8007b7a <_vfiprintf_r+0x156>
 8007b64:	7863      	ldrb	r3, [r4, #1]
 8007b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b68:	d132      	bne.n	8007bd0 <_vfiprintf_r+0x1ac>
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	1d1a      	adds	r2, r3, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	9203      	str	r2, [sp, #12]
 8007b72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b76:	3402      	adds	r4, #2
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c50 <_vfiprintf_r+0x22c>
 8007b7e:	7821      	ldrb	r1, [r4, #0]
 8007b80:	2203      	movs	r2, #3
 8007b82:	4650      	mov	r0, sl
 8007b84:	f7f8 fb2c 	bl	80001e0 <memchr>
 8007b88:	b138      	cbz	r0, 8007b9a <_vfiprintf_r+0x176>
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	eba0 000a 	sub.w	r0, r0, sl
 8007b90:	2240      	movs	r2, #64	@ 0x40
 8007b92:	4082      	lsls	r2, r0
 8007b94:	4313      	orrs	r3, r2
 8007b96:	3401      	adds	r4, #1
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9e:	4829      	ldr	r0, [pc, #164]	@ (8007c44 <_vfiprintf_r+0x220>)
 8007ba0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ba4:	2206      	movs	r2, #6
 8007ba6:	f7f8 fb1b 	bl	80001e0 <memchr>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d03f      	beq.n	8007c2e <_vfiprintf_r+0x20a>
 8007bae:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <_vfiprintf_r+0x224>)
 8007bb0:	bb1b      	cbnz	r3, 8007bfa <_vfiprintf_r+0x1d6>
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	3307      	adds	r3, #7
 8007bb6:	f023 0307 	bic.w	r3, r3, #7
 8007bba:	3308      	adds	r3, #8
 8007bbc:	9303      	str	r3, [sp, #12]
 8007bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc0:	443b      	add	r3, r7
 8007bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc4:	e76a      	b.n	8007a9c <_vfiprintf_r+0x78>
 8007bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bca:	460c      	mov	r4, r1
 8007bcc:	2001      	movs	r0, #1
 8007bce:	e7a8      	b.n	8007b22 <_vfiprintf_r+0xfe>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	3401      	adds	r4, #1
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f04f 0c0a 	mov.w	ip, #10
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be2:	3a30      	subs	r2, #48	@ 0x30
 8007be4:	2a09      	cmp	r2, #9
 8007be6:	d903      	bls.n	8007bf0 <_vfiprintf_r+0x1cc>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0c6      	beq.n	8007b7a <_vfiprintf_r+0x156>
 8007bec:	9105      	str	r1, [sp, #20]
 8007bee:	e7c4      	b.n	8007b7a <_vfiprintf_r+0x156>
 8007bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e7f0      	b.n	8007bdc <_vfiprintf_r+0x1b8>
 8007bfa:	ab03      	add	r3, sp, #12
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <_vfiprintf_r+0x228>)
 8007c02:	a904      	add	r1, sp, #16
 8007c04:	4630      	mov	r0, r6
 8007c06:	f3af 8000 	nop.w
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	1c78      	adds	r0, r7, #1
 8007c0e:	d1d6      	bne.n	8007bbe <_vfiprintf_r+0x19a>
 8007c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c12:	07d9      	lsls	r1, r3, #31
 8007c14:	d405      	bmi.n	8007c22 <_vfiprintf_r+0x1fe>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	059a      	lsls	r2, r3, #22
 8007c1a:	d402      	bmi.n	8007c22 <_vfiprintf_r+0x1fe>
 8007c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c1e:	f7ff fdcf 	bl	80077c0 <__retarget_lock_release_recursive>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	065b      	lsls	r3, r3, #25
 8007c26:	f53f af1f 	bmi.w	8007a68 <_vfiprintf_r+0x44>
 8007c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c2c:	e71e      	b.n	8007a6c <_vfiprintf_r+0x48>
 8007c2e:	ab03      	add	r3, sp, #12
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	462a      	mov	r2, r5
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <_vfiprintf_r+0x228>)
 8007c36:	a904      	add	r1, sp, #16
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f879 	bl	8007d30 <_printf_i>
 8007c3e:	e7e4      	b.n	8007c0a <_vfiprintf_r+0x1e6>
 8007c40:	0801db48 	.word	0x0801db48
 8007c44:	0801db52 	.word	0x0801db52
 8007c48:	00000000 	.word	0x00000000
 8007c4c:	080079ff 	.word	0x080079ff
 8007c50:	0801db4e 	.word	0x0801db4e

08007c54 <_printf_common>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	4616      	mov	r6, r2
 8007c5a:	4698      	mov	r8, r3
 8007c5c:	688a      	ldr	r2, [r1, #8]
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bfb8      	it	lt
 8007c68:	4613      	movlt	r3, r2
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c70:	4607      	mov	r7, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b10a      	cbz	r2, 8007c7a <_printf_common+0x26>
 8007c76:	3301      	adds	r3, #1
 8007c78:	6033      	str	r3, [r6, #0]
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	0699      	lsls	r1, r3, #26
 8007c7e:	bf42      	ittt	mi
 8007c80:	6833      	ldrmi	r3, [r6, #0]
 8007c82:	3302      	addmi	r3, #2
 8007c84:	6033      	strmi	r3, [r6, #0]
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	f015 0506 	ands.w	r5, r5, #6
 8007c8c:	d106      	bne.n	8007c9c <_printf_common+0x48>
 8007c8e:	f104 0a19 	add.w	sl, r4, #25
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	6832      	ldr	r2, [r6, #0]
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc26      	bgt.n	8007cea <_printf_common+0x96>
 8007c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	3b00      	subs	r3, #0
 8007ca4:	bf18      	it	ne
 8007ca6:	2301      	movne	r3, #1
 8007ca8:	0692      	lsls	r2, r2, #26
 8007caa:	d42b      	bmi.n	8007d04 <_printf_common+0xb0>
 8007cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c8      	blx	r9
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d01e      	beq.n	8007cf8 <_printf_common+0xa4>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	6922      	ldr	r2, [r4, #16]
 8007cbe:	f003 0306 	and.w	r3, r3, #6
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	bf02      	ittt	eq
 8007cc6:	68e5      	ldreq	r5, [r4, #12]
 8007cc8:	6833      	ldreq	r3, [r6, #0]
 8007cca:	1aed      	subeq	r5, r5, r3
 8007ccc:	68a3      	ldr	r3, [r4, #8]
 8007cce:	bf0c      	ite	eq
 8007cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd4:	2500      	movne	r5, #0
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	bfc4      	itt	gt
 8007cda:	1a9b      	subgt	r3, r3, r2
 8007cdc:	18ed      	addgt	r5, r5, r3
 8007cde:	2600      	movs	r6, #0
 8007ce0:	341a      	adds	r4, #26
 8007ce2:	42b5      	cmp	r5, r6
 8007ce4:	d11a      	bne.n	8007d1c <_printf_common+0xc8>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e008      	b.n	8007cfc <_printf_common+0xa8>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4652      	mov	r2, sl
 8007cee:	4641      	mov	r1, r8
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	47c8      	blx	r9
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d103      	bne.n	8007d00 <_printf_common+0xac>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d00:	3501      	adds	r5, #1
 8007d02:	e7c6      	b.n	8007c92 <_printf_common+0x3e>
 8007d04:	18e1      	adds	r1, r4, r3
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	2030      	movs	r0, #48	@ 0x30
 8007d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d0e:	4422      	add	r2, r4
 8007d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d18:	3302      	adds	r3, #2
 8007d1a:	e7c7      	b.n	8007cac <_printf_common+0x58>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4622      	mov	r2, r4
 8007d20:	4641      	mov	r1, r8
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c8      	blx	r9
 8007d26:	3001      	adds	r0, #1
 8007d28:	d0e6      	beq.n	8007cf8 <_printf_common+0xa4>
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7d9      	b.n	8007ce2 <_printf_common+0x8e>
	...

08007d30 <_printf_i>:
 8007d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	7e0f      	ldrb	r7, [r1, #24]
 8007d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d38:	2f78      	cmp	r7, #120	@ 0x78
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	469a      	mov	sl, r3
 8007d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d46:	d807      	bhi.n	8007d58 <_printf_i+0x28>
 8007d48:	2f62      	cmp	r7, #98	@ 0x62
 8007d4a:	d80a      	bhi.n	8007d62 <_printf_i+0x32>
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	f000 80d2 	beq.w	8007ef6 <_printf_i+0x1c6>
 8007d52:	2f58      	cmp	r7, #88	@ 0x58
 8007d54:	f000 80b9 	beq.w	8007eca <_printf_i+0x19a>
 8007d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d60:	e03a      	b.n	8007dd8 <_printf_i+0xa8>
 8007d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d66:	2b15      	cmp	r3, #21
 8007d68:	d8f6      	bhi.n	8007d58 <_printf_i+0x28>
 8007d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d70 <_printf_i+0x40>)
 8007d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007d59 	.word	0x08007d59
 8007d7c:	08007d59 	.word	0x08007d59
 8007d80:	08007d59 	.word	0x08007d59
 8007d84:	08007d59 	.word	0x08007d59
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007d59 	.word	0x08007d59
 8007d90:	08007d59 	.word	0x08007d59
 8007d94:	08007d59 	.word	0x08007d59
 8007d98:	08007d59 	.word	0x08007d59
 8007d9c:	08007edd 	.word	0x08007edd
 8007da0:	08007e07 	.word	0x08007e07
 8007da4:	08007e97 	.word	0x08007e97
 8007da8:	08007d59 	.word	0x08007d59
 8007dac:	08007d59 	.word	0x08007d59
 8007db0:	08007eff 	.word	0x08007eff
 8007db4:	08007d59 	.word	0x08007d59
 8007db8:	08007e07 	.word	0x08007e07
 8007dbc:	08007d59 	.word	0x08007d59
 8007dc0:	08007d59 	.word	0x08007d59
 8007dc4:	08007e9f 	.word	0x08007e9f
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	1d1a      	adds	r2, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6032      	str	r2, [r6, #0]
 8007dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e09d      	b.n	8007f18 <_printf_i+0x1e8>
 8007ddc:	6833      	ldr	r3, [r6, #0]
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	6031      	str	r1, [r6, #0]
 8007de4:	0606      	lsls	r6, r0, #24
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0xbc>
 8007de8:	681d      	ldr	r5, [r3, #0]
 8007dea:	e003      	b.n	8007df4 <_printf_i+0xc4>
 8007dec:	0645      	lsls	r5, r0, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0xb8>
 8007df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	da03      	bge.n	8007e00 <_printf_i+0xd0>
 8007df8:	232d      	movs	r3, #45	@ 0x2d
 8007dfa:	426d      	negs	r5, r5
 8007dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e00:	4859      	ldr	r0, [pc, #356]	@ (8007f68 <_printf_i+0x238>)
 8007e02:	230a      	movs	r3, #10
 8007e04:	e011      	b.n	8007e2a <_printf_i+0xfa>
 8007e06:	6821      	ldr	r1, [r4, #0]
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	0608      	lsls	r0, r1, #24
 8007e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e10:	d402      	bmi.n	8007e18 <_printf_i+0xe8>
 8007e12:	0649      	lsls	r1, r1, #25
 8007e14:	bf48      	it	mi
 8007e16:	b2ad      	uxthmi	r5, r5
 8007e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e1a:	4853      	ldr	r0, [pc, #332]	@ (8007f68 <_printf_i+0x238>)
 8007e1c:	6033      	str	r3, [r6, #0]
 8007e1e:	bf14      	ite	ne
 8007e20:	230a      	movne	r3, #10
 8007e22:	2308      	moveq	r3, #8
 8007e24:	2100      	movs	r1, #0
 8007e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e2a:	6866      	ldr	r6, [r4, #4]
 8007e2c:	60a6      	str	r6, [r4, #8]
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	bfa2      	ittt	ge
 8007e32:	6821      	ldrge	r1, [r4, #0]
 8007e34:	f021 0104 	bicge.w	r1, r1, #4
 8007e38:	6021      	strge	r1, [r4, #0]
 8007e3a:	b90d      	cbnz	r5, 8007e40 <_printf_i+0x110>
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	d04b      	beq.n	8007ed8 <_printf_i+0x1a8>
 8007e40:	4616      	mov	r6, r2
 8007e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e46:	fb03 5711 	mls	r7, r3, r1, r5
 8007e4a:	5dc7      	ldrb	r7, [r0, r7]
 8007e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e50:	462f      	mov	r7, r5
 8007e52:	42bb      	cmp	r3, r7
 8007e54:	460d      	mov	r5, r1
 8007e56:	d9f4      	bls.n	8007e42 <_printf_i+0x112>
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d10b      	bne.n	8007e74 <_printf_i+0x144>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	07df      	lsls	r7, r3, #31
 8007e60:	d508      	bpl.n	8007e74 <_printf_i+0x144>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4299      	cmp	r1, r3
 8007e68:	bfde      	ittt	le
 8007e6a:	2330      	movle	r3, #48	@ 0x30
 8007e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e70:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e74:	1b92      	subs	r2, r2, r6
 8007e76:	6122      	str	r2, [r4, #16]
 8007e78:	f8cd a000 	str.w	sl, [sp]
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	aa03      	add	r2, sp, #12
 8007e80:	4621      	mov	r1, r4
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7ff fee6 	bl	8007c54 <_printf_common>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d14a      	bne.n	8007f22 <_printf_i+0x1f2>
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e90:	b004      	add	sp, #16
 8007e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f043 0320 	orr.w	r3, r3, #32
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	4833      	ldr	r0, [pc, #204]	@ (8007f6c <_printf_i+0x23c>)
 8007ea0:	2778      	movs	r7, #120	@ 0x78
 8007ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	6831      	ldr	r1, [r6, #0]
 8007eaa:	061f      	lsls	r7, r3, #24
 8007eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eb0:	d402      	bmi.n	8007eb8 <_printf_i+0x188>
 8007eb2:	065f      	lsls	r7, r3, #25
 8007eb4:	bf48      	it	mi
 8007eb6:	b2ad      	uxthmi	r5, r5
 8007eb8:	6031      	str	r1, [r6, #0]
 8007eba:	07d9      	lsls	r1, r3, #31
 8007ebc:	bf44      	itt	mi
 8007ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8007ec2:	6023      	strmi	r3, [r4, #0]
 8007ec4:	b11d      	cbz	r5, 8007ece <_printf_i+0x19e>
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	e7ac      	b.n	8007e24 <_printf_i+0xf4>
 8007eca:	4827      	ldr	r0, [pc, #156]	@ (8007f68 <_printf_i+0x238>)
 8007ecc:	e7e9      	b.n	8007ea2 <_printf_i+0x172>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f023 0320 	bic.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	e7f6      	b.n	8007ec6 <_printf_i+0x196>
 8007ed8:	4616      	mov	r6, r2
 8007eda:	e7bd      	b.n	8007e58 <_printf_i+0x128>
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	6825      	ldr	r5, [r4, #0]
 8007ee0:	6961      	ldr	r1, [r4, #20]
 8007ee2:	1d18      	adds	r0, r3, #4
 8007ee4:	6030      	str	r0, [r6, #0]
 8007ee6:	062e      	lsls	r6, r5, #24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0x1c0>
 8007eec:	6019      	str	r1, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0x1c6>
 8007ef0:	0668      	lsls	r0, r5, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0x1bc>
 8007ef4:	8019      	strh	r1, [r3, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	4616      	mov	r6, r2
 8007efc:	e7bc      	b.n	8007e78 <_printf_i+0x148>
 8007efe:	6833      	ldr	r3, [r6, #0]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	6032      	str	r2, [r6, #0]
 8007f04:	681e      	ldr	r6, [r3, #0]
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7f8 f968 	bl	80001e0 <memchr>
 8007f10:	b108      	cbz	r0, 8007f16 <_printf_i+0x1e6>
 8007f12:	1b80      	subs	r0, r0, r6
 8007f14:	6060      	str	r0, [r4, #4]
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f20:	e7aa      	b.n	8007e78 <_printf_i+0x148>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0ad      	beq.n	8007e8c <_printf_i+0x15c>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	d413      	bmi.n	8007f5e <_printf_i+0x22e>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	bfb8      	it	lt
 8007f3e:	4618      	movlt	r0, r3
 8007f40:	e7a6      	b.n	8007e90 <_printf_i+0x160>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d09d      	beq.n	8007e8c <_printf_i+0x15c>
 8007f50:	3501      	adds	r5, #1
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	9903      	ldr	r1, [sp, #12]
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dcf2      	bgt.n	8007f42 <_printf_i+0x212>
 8007f5c:	e7eb      	b.n	8007f36 <_printf_i+0x206>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	f104 0619 	add.w	r6, r4, #25
 8007f64:	e7f5      	b.n	8007f52 <_printf_i+0x222>
 8007f66:	bf00      	nop
 8007f68:	0801db59 	.word	0x0801db59
 8007f6c:	0801db6a 	.word	0x0801db6a

08007f70 <__sflush_r>:
 8007f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	0716      	lsls	r6, r2, #28
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	d454      	bmi.n	800802a <__sflush_r+0xba>
 8007f80:	684b      	ldr	r3, [r1, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dc02      	bgt.n	8007f8c <__sflush_r+0x1c>
 8007f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd48      	ble.n	800801e <__sflush_r+0xae>
 8007f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d045      	beq.n	800801e <__sflush_r+0xae>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f98:	682f      	ldr	r7, [r5, #0]
 8007f9a:	6a21      	ldr	r1, [r4, #32]
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	d030      	beq.n	8008002 <__sflush_r+0x92>
 8007fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	0759      	lsls	r1, r3, #29
 8007fa6:	d505      	bpl.n	8007fb4 <__sflush_r+0x44>
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fae:	b10b      	cbz	r3, 8007fb4 <__sflush_r+0x44>
 8007fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b0      	blx	r6
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	d106      	bne.n	8007fd2 <__sflush_r+0x62>
 8007fc4:	6829      	ldr	r1, [r5, #0]
 8007fc6:	291d      	cmp	r1, #29
 8007fc8:	d82b      	bhi.n	8008022 <__sflush_r+0xb2>
 8007fca:	4a2a      	ldr	r2, [pc, #168]	@ (8008074 <__sflush_r+0x104>)
 8007fcc:	410a      	asrs	r2, r1
 8007fce:	07d6      	lsls	r6, r2, #31
 8007fd0:	d427      	bmi.n	8008022 <__sflush_r+0xb2>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6062      	str	r2, [r4, #4]
 8007fd6:	04d9      	lsls	r1, r3, #19
 8007fd8:	6922      	ldr	r2, [r4, #16]
 8007fda:	6022      	str	r2, [r4, #0]
 8007fdc:	d504      	bpl.n	8007fe8 <__sflush_r+0x78>
 8007fde:	1c42      	adds	r2, r0, #1
 8007fe0:	d101      	bne.n	8007fe6 <__sflush_r+0x76>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	b903      	cbnz	r3, 8007fe8 <__sflush_r+0x78>
 8007fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fea:	602f      	str	r7, [r5, #0]
 8007fec:	b1b9      	cbz	r1, 800801e <__sflush_r+0xae>
 8007fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d002      	beq.n	8007ffc <__sflush_r+0x8c>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7ff fbf2 	bl	80077e0 <_free_r>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008000:	e00d      	b.n	800801e <__sflush_r+0xae>
 8008002:	2301      	movs	r3, #1
 8008004:	4628      	mov	r0, r5
 8008006:	47b0      	blx	r6
 8008008:	4602      	mov	r2, r0
 800800a:	1c50      	adds	r0, r2, #1
 800800c:	d1c9      	bne.n	8007fa2 <__sflush_r+0x32>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0c6      	beq.n	8007fa2 <__sflush_r+0x32>
 8008014:	2b1d      	cmp	r3, #29
 8008016:	d001      	beq.n	800801c <__sflush_r+0xac>
 8008018:	2b16      	cmp	r3, #22
 800801a:	d11e      	bne.n	800805a <__sflush_r+0xea>
 800801c:	602f      	str	r7, [r5, #0]
 800801e:	2000      	movs	r0, #0
 8008020:	e022      	b.n	8008068 <__sflush_r+0xf8>
 8008022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008026:	b21b      	sxth	r3, r3
 8008028:	e01b      	b.n	8008062 <__sflush_r+0xf2>
 800802a:	690f      	ldr	r7, [r1, #16]
 800802c:	2f00      	cmp	r7, #0
 800802e:	d0f6      	beq.n	800801e <__sflush_r+0xae>
 8008030:	0793      	lsls	r3, r2, #30
 8008032:	680e      	ldr	r6, [r1, #0]
 8008034:	bf08      	it	eq
 8008036:	694b      	ldreq	r3, [r1, #20]
 8008038:	600f      	str	r7, [r1, #0]
 800803a:	bf18      	it	ne
 800803c:	2300      	movne	r3, #0
 800803e:	eba6 0807 	sub.w	r8, r6, r7
 8008042:	608b      	str	r3, [r1, #8]
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	dde9      	ble.n	800801e <__sflush_r+0xae>
 800804a:	6a21      	ldr	r1, [r4, #32]
 800804c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800804e:	4643      	mov	r3, r8
 8008050:	463a      	mov	r2, r7
 8008052:	4628      	mov	r0, r5
 8008054:	47b0      	blx	r6
 8008056:	2800      	cmp	r0, #0
 8008058:	dc08      	bgt.n	800806c <__sflush_r+0xfc>
 800805a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806c:	4407      	add	r7, r0
 800806e:	eba8 0800 	sub.w	r8, r8, r0
 8008072:	e7e7      	b.n	8008044 <__sflush_r+0xd4>
 8008074:	dfbffffe 	.word	0xdfbffffe

08008078 <_fflush_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	4605      	mov	r5, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b913      	cbnz	r3, 8008088 <_fflush_r+0x10>
 8008082:	2500      	movs	r5, #0
 8008084:	4628      	mov	r0, r5
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	b118      	cbz	r0, 8008092 <_fflush_r+0x1a>
 800808a:	6a03      	ldr	r3, [r0, #32]
 800808c:	b90b      	cbnz	r3, 8008092 <_fflush_r+0x1a>
 800808e:	f7ff f997 	bl	80073c0 <__sinit>
 8008092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f3      	beq.n	8008082 <_fflush_r+0xa>
 800809a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800809c:	07d0      	lsls	r0, r2, #31
 800809e:	d404      	bmi.n	80080aa <_fflush_r+0x32>
 80080a0:	0599      	lsls	r1, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_fflush_r+0x32>
 80080a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080a6:	f7ff fb8a 	bl	80077be <__retarget_lock_acquire_recursive>
 80080aa:	4628      	mov	r0, r5
 80080ac:	4621      	mov	r1, r4
 80080ae:	f7ff ff5f 	bl	8007f70 <__sflush_r>
 80080b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080b4:	07da      	lsls	r2, r3, #31
 80080b6:	4605      	mov	r5, r0
 80080b8:	d4e4      	bmi.n	8008084 <_fflush_r+0xc>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	059b      	lsls	r3, r3, #22
 80080be:	d4e1      	bmi.n	8008084 <_fflush_r+0xc>
 80080c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080c2:	f7ff fb7d 	bl	80077c0 <__retarget_lock_release_recursive>
 80080c6:	e7dd      	b.n	8008084 <_fflush_r+0xc>

080080c8 <__swhatbuf_r>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	2900      	cmp	r1, #0
 80080d2:	b096      	sub	sp, #88	@ 0x58
 80080d4:	4615      	mov	r5, r2
 80080d6:	461e      	mov	r6, r3
 80080d8:	da0d      	bge.n	80080f6 <__swhatbuf_r+0x2e>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080e0:	f04f 0100 	mov.w	r1, #0
 80080e4:	bf14      	ite	ne
 80080e6:	2340      	movne	r3, #64	@ 0x40
 80080e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080ec:	2000      	movs	r0, #0
 80080ee:	6031      	str	r1, [r6, #0]
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	b016      	add	sp, #88	@ 0x58
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	466a      	mov	r2, sp
 80080f8:	f000 f87c 	bl	80081f4 <_fstat_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	dbec      	blt.n	80080da <__swhatbuf_r+0x12>
 8008100:	9901      	ldr	r1, [sp, #4]
 8008102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800810a:	4259      	negs	r1, r3
 800810c:	4159      	adcs	r1, r3
 800810e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008112:	e7eb      	b.n	80080ec <__swhatbuf_r+0x24>

08008114 <__smakebuf_r>:
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008118:	079d      	lsls	r5, r3, #30
 800811a:	4606      	mov	r6, r0
 800811c:	460c      	mov	r4, r1
 800811e:	d507      	bpl.n	8008130 <__smakebuf_r+0x1c>
 8008120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	2301      	movs	r3, #1
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	b003      	add	sp, #12
 800812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008130:	ab01      	add	r3, sp, #4
 8008132:	466a      	mov	r2, sp
 8008134:	f7ff ffc8 	bl	80080c8 <__swhatbuf_r>
 8008138:	9f00      	ldr	r7, [sp, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	4639      	mov	r1, r7
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff fbba 	bl	80078b8 <_malloc_r>
 8008144:	b948      	cbnz	r0, 800815a <__smakebuf_r+0x46>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	059a      	lsls	r2, r3, #22
 800814c:	d4ee      	bmi.n	800812c <__smakebuf_r+0x18>
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	f043 0302 	orr.w	r3, r3, #2
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	e7e2      	b.n	8008120 <__smakebuf_r+0xc>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	6020      	str	r0, [r4, #0]
 800815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800816a:	b15b      	cbz	r3, 8008184 <__smakebuf_r+0x70>
 800816c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008170:	4630      	mov	r0, r6
 8008172:	f000 f851 	bl	8008218 <_isatty_r>
 8008176:	b128      	cbz	r0, 8008184 <__smakebuf_r+0x70>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	431d      	orrs	r5, r3
 8008188:	81a5      	strh	r5, [r4, #12]
 800818a:	e7cf      	b.n	800812c <__smakebuf_r+0x18>

0800818c <_putc_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	460d      	mov	r5, r1
 8008190:	4614      	mov	r4, r2
 8008192:	4606      	mov	r6, r0
 8008194:	b118      	cbz	r0, 800819e <_putc_r+0x12>
 8008196:	6a03      	ldr	r3, [r0, #32]
 8008198:	b90b      	cbnz	r3, 800819e <_putc_r+0x12>
 800819a:	f7ff f911 	bl	80073c0 <__sinit>
 800819e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081a0:	07d8      	lsls	r0, r3, #31
 80081a2:	d405      	bmi.n	80081b0 <_putc_r+0x24>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	0599      	lsls	r1, r3, #22
 80081a8:	d402      	bmi.n	80081b0 <_putc_r+0x24>
 80081aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ac:	f7ff fb07 	bl	80077be <__retarget_lock_acquire_recursive>
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	60a3      	str	r3, [r4, #8]
 80081b8:	da05      	bge.n	80081c6 <_putc_r+0x3a>
 80081ba:	69a2      	ldr	r2, [r4, #24]
 80081bc:	4293      	cmp	r3, r2
 80081be:	db12      	blt.n	80081e6 <_putc_r+0x5a>
 80081c0:	b2eb      	uxtb	r3, r5
 80081c2:	2b0a      	cmp	r3, #10
 80081c4:	d00f      	beq.n	80081e6 <_putc_r+0x5a>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	701d      	strb	r5, [r3, #0]
 80081ce:	b2ed      	uxtb	r5, r5
 80081d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081d2:	07da      	lsls	r2, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_putc_r+0x56>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	059b      	lsls	r3, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_putc_r+0x56>
 80081dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081de:	f7ff faef 	bl	80077c0 <__retarget_lock_release_recursive>
 80081e2:	4628      	mov	r0, r5
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	4629      	mov	r1, r5
 80081e8:	4622      	mov	r2, r4
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff f9d9 	bl	80075a2 <__swbuf_r>
 80081f0:	4605      	mov	r5, r0
 80081f2:	e7ed      	b.n	80081d0 <_putc_r+0x44>

080081f4 <_fstat_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	@ (8008214 <_fstat_r+0x20>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	4611      	mov	r1, r2
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f7f9 f96a 	bl	80014da <_fstat>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d102      	bne.n	8008210 <_fstat_r+0x1c>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	b103      	cbz	r3, 8008210 <_fstat_r+0x1c>
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	20001b20 	.word	0x20001b20

08008218 <_isatty_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d06      	ldr	r5, [pc, #24]	@ (8008234 <_isatty_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7f9 f969 	bl	80014fa <_isatty>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_isatty_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_isatty_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20001b20 	.word	0x20001b20

08008238 <_sbrk_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d06      	ldr	r5, [pc, #24]	@ (8008254 <_sbrk_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7f9 f972 	bl	800152c <_sbrk>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_sbrk_r+0x1a>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_sbrk_r+0x1a>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20001b20 	.word	0x20001b20

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
